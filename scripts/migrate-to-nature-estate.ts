/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Nature Estate Company
 * 
 * ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
 * 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Nature Estate company ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
 * 2. ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• deliveryNotes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÉ‡∏™‡πà companyId ‡∏Ç‡∏≠‡∏á Nature Estate
 * 3. ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• warrantyCards ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÉ‡∏™‡πà companyId ‡∏Ç‡∏≠‡∏á Nature Estate
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô:
 * npx ts-node scripts/migrate-to-nature-estate.ts
 */

import { initializeApp } from "firebase/app";
import { 
    getFirestore, 
    collection, 
    getDocs, 
    doc, 
    updateDoc,
    query,
    where,
    Timestamp,
    setDoc
} from "firebase/firestore";
import { getAuth, signInWithEmailAndPassword } from "firebase/auth";

// Firebase Configuration
const firebaseConfig = {
    apiKey: "AIzaSyBy4f-C66l03f4-ODOO_aGyseaIDmDb7tk",
    authDomain: "ecertonline-29a67.firebaseapp.com",
    projectId: "ecertonline-29a67",
    storageBucket: "ecertonline-29a67.firebasestorage.app",
    messagingSenderId: "457246107908",
    appId: "1:457246107908:web:1008539ce20637935c8851"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// ‡∏ä‡∏∑‡πà‡∏≠ Company ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ
const TARGET_COMPANY_NAME = "Nature Estate";

/**
 * ‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Nature Estate Company
 */
async function findOrCreateNatureEstateCompany(userId: string): Promise<string> {
    console.log('\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Nature Estate Company...');
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ company ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    const companiesRef = collection(db, 'companies');
    const q = query(companiesRef, where('name', '==', TARGET_COMPANY_NAME));
    const querySnapshot = await getDocs(q);
    
    if (!querySnapshot.empty) {
        const companyDoc = querySnapshot.docs[0];
        console.log(`‚úÖ ‡∏û‡∏ö ${TARGET_COMPANY_NAME} ‡πÅ‡∏•‡πâ‡∏ß (ID: ${companyDoc.id})`);
        return companyDoc.id;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á company ‡πÉ‡∏´‡∏°‡πà
    console.log(`üìù ‡πÑ‡∏°‡πà‡∏û‡∏ö ${TARGET_COMPANY_NAME}, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...`);
    const newCompanyRef = doc(collection(db, 'companies'));
    const companyId = newCompanyRef.id;
    
    await setDoc(newCompanyRef, {
        name: TARGET_COMPANY_NAME,
        address: '',
        userId: userId,
        logoUrl: null,
        logoType: 'default',
        defaultLogoUrl: null,
        memberCount: 1,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now(),
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° admin member
    const memberRef = doc(collection(db, 'companyMembers'));
    await setDoc(memberRef, {
        companyId: companyId,
        userId: userId,
        email: auth.currentUser?.email || '',
        phoneNumber: auth.currentUser?.phoneNumber || null,
        displayName: auth.currentUser?.displayName || 'Admin',
        role: 'admin',
        status: 'active',
        joinedAt: Timestamp.now(),
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now(),
    });
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${TARGET_COMPANY_NAME} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ID: ${companyId})`);
    return companyId;
}

/**
 * ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Delivery Notes
 */
async function migrateDeliveryNotes(companyId: string, userId: string): Promise<number> {
    console.log('\nüì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢ Delivery Notes...');
    
    const deliveryNotesRef = collection(db, 'deliveryNotes');
    const q = query(deliveryNotesRef, where('userId', '==', userId));
    const querySnapshot = await getDocs(q);
    
    let migratedCount = 0;
    
    for (const docSnapshot of querySnapshot.docs) {
        const data = docSnapshot.data();
        
        // ‡∏Ç‡πâ‡∏≤‡∏° document ‡∏ó‡∏µ‡πà‡∏°‡∏µ companyId ‡πÄ‡∏õ‡πá‡∏ô Nature Estate ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if (data.companyId === companyId) {
            console.log(`‚è≠Ô∏è  ${docSnapshot.id} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Nature Estate ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
            continue;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï companyId
        await updateDoc(doc(db, 'deliveryNotes', docSnapshot.id), {
            companyId: companyId,
            updatedAt: Timestamp.now(),
        });
        
        console.log(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Delivery Note: ${docSnapshot.id} (${data.docNumber})`);
        migratedCount++;
    }
    
    console.log(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Delivery Notes ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${migratedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    return migratedCount;
}

/**
 * ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Warranty Cards
 */
async function migrateWarrantyCards(companyId: string, userId: string): Promise<number> {
    console.log('\nüõ°Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢ Warranty Cards...');
    
    const warrantyCardsRef = collection(db, 'warrantyCards');
    const q = query(warrantyCardsRef, where('userId', '==', userId));
    const querySnapshot = await getDocs(q);
    
    let migratedCount = 0;
    
    for (const docSnapshot of querySnapshot.docs) {
        const data = docSnapshot.data();
        
        // ‡∏Ç‡πâ‡∏≤‡∏° document ‡∏ó‡∏µ‡πà‡∏°‡∏µ companyId ‡πÄ‡∏õ‡πá‡∏ô Nature Estate ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if (data.companyId === companyId) {
            console.log(`‚è≠Ô∏è  ${docSnapshot.id} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Nature Estate ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
            continue;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï companyId
        await updateDoc(doc(db, 'warrantyCards', docSnapshot.id), {
            companyId: companyId,
            updatedAt: Timestamp.now(),
        });
        
        console.log(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Warranty Card: ${docSnapshot.id} (${data.warrantyNumber || data.houseModel})`);
        migratedCount++;
    }
    
    console.log(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Warranty Cards ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${migratedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    return migratedCount;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
async function showCurrentStats(userId: string): Promise<void> {
    console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    
    // ‡∏ô‡∏±‡∏ö Companies
    const companiesRef = collection(db, 'companies');
    const companiesSnapshot = await getDocs(companiesRef);
    console.log(`   üìÅ Companies: ${companiesSnapshot.size} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£`);
    
    companiesSnapshot.docs.forEach(doc => {
        const data = doc.data();
        console.log(`      - ${data.name} (ID: ${doc.id}, Members: ${data.memberCount || 0})`);
    });
    
    // ‡∏ô‡∏±‡∏ö Delivery Notes
    const deliveryNotesRef = collection(db, 'deliveryNotes');
    const deliveryNotesQuery = query(deliveryNotesRef, where('userId', '==', userId));
    const deliveryNotesSnapshot = await getDocs(deliveryNotesQuery);
    console.log(`   üì¶ Delivery Notes: ${deliveryNotesSnapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î delivery notes ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° company
    const deliveryByCompany: { [key: string]: number } = {};
    deliveryNotesSnapshot.docs.forEach(doc => {
        const data = doc.data();
        const companyId = data.companyId || '‡πÑ‡∏°‡πà‡∏°‡∏µ company';
        deliveryByCompany[companyId] = (deliveryByCompany[companyId] || 0) + 1;
    });
    Object.entries(deliveryByCompany).forEach(([companyId, count]) => {
        console.log(`      - ${companyId}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
    // ‡∏ô‡∏±‡∏ö Warranty Cards
    const warrantyCardsRef = collection(db, 'warrantyCards');
    const warrantyCardsQuery = query(warrantyCardsRef, where('userId', '==', userId));
    const warrantyCardsSnapshot = await getDocs(warrantyCardsQuery);
    console.log(`   üõ°Ô∏è  Warranty Cards: ${warrantyCardsSnapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î warranty cards ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° company
    const warrantyByCompany: { [key: string]: number } = {};
    warrantyCardsSnapshot.docs.forEach(doc => {
        const data = doc.data();
        const companyId = data.companyId || '‡πÑ‡∏°‡πà‡∏°‡∏µ company';
        warrantyByCompany[companyId] = (warrantyByCompany[companyId] || 0) + 1;
    });
    Object.entries(warrantyByCompany).forEach(([companyId, count]) => {
        console.log(`      - ${companyId}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
    // ‡∏ô‡∏±‡∏ö Company Members
    const membersRef = collection(db, 'companyMembers');
    const membersSnapshot = await getDocs(membersRef);
    console.log(`   üë• Company Members: ${membersSnapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
}

/**
 * Main Migration Function
 */
async function main() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Migration Script');
    console.log('=' .repeat(60));
    
    try {
        // ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login
        console.log('\nüìß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Login:');
        const email = process.env.FIREBASE_EMAIL || '';
        const password = process.env.FIREBASE_PASSWORD || '';
        
        if (!email || !password) {
            console.error('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ FIREBASE_EMAIL ‡πÅ‡∏•‡∏∞ FIREBASE_PASSWORD environment variables');
            console.log('\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:');
            console.log('FIREBASE_EMAIL=your@email.com FIREBASE_PASSWORD=yourpassword npx ts-node scripts/migrate-to-nature-estate.ts');
            process.exit(1);
        }
        
        // Login
        console.log(`\nüîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á Login ‡∏î‡πâ‡∏ß‡∏¢: ${email}`);
        const userCredential = await signInWithEmailAndPassword(auth, email, password);
        const userId = userCredential.user.uid;
        console.log(`‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (User ID: ${userId})`);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô migration
        await showCurrentStats(userId);
        
        // ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á Nature Estate Company
        const natureEstateId = await findOrCreateNatureEstateCompany(userId);
        
        // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô migration
        console.log('\n‚ö†Ô∏è  ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Nature Estate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
        console.log('   ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏° Migration
        console.log('\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Migration...');
        console.log('=' .repeat(60));
        
        const deliveryCount = await migrateDeliveryNotes(natureEstateId, userId);
        const warrantyCount = await migrateWarrantyCards(natureEstateId, userId);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á migration
        console.log('\n' + '=' .repeat(60));
        await showCurrentStats(userId);
        
        // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        console.log('\n' + '=' .repeat(60));
        console.log('‚úÖ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        console.log(`   üì¶ ‡∏¢‡πâ‡∏≤‡∏¢ Delivery Notes: ${deliveryCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   üõ°Ô∏è  ‡∏¢‡πâ‡∏≤‡∏¢ Warranty Cards: ${warrantyCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   üéØ ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: ${TARGET_COMPANY_NAME} (ID: ${natureEstateId})`);
        console.log('=' .repeat(60));
        
        process.exit(0);
    } catch (error) {
        console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
        process.exit(1);
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ main function
main();

