/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore (‡πÉ‡∏ä‡πâ Firebase Admin SDK)
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô:
 * 1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Service Account Key ‡∏à‡∏≤‡∏Å Firebase Console
 * 2. ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà scripts/serviceAccountKey.json
 * 3. ‡∏£‡∏±‡∏ô: USER_ID=your-user-id npx ts-node scripts/check-firestore-admin.ts
 */

import * as admin from 'firebase-admin';
import * as path from 'path';
import * as fs from 'fs';

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ User ID ‡∏à‡∏≤‡∏Å environment variable
const TARGET_USER_ID = process.env.USER_ID || '';

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Service Account Key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const serviceAccountPath = path.join(__dirname, 'serviceAccountKey.json');

if (!fs.existsSync(serviceAccountPath)) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå serviceAccountKey.json');
    console.log('\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Service Account Key:');
    console.log('1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://console.firebase.google.com/');
    console.log('2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project: ecertonline-29a67');
    console.log('3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Project Settings > Service accounts');
    console.log('4. ‡∏Ñ‡∏•‡∏¥‡∏Å "Generate new private key"');
    console.log('5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô "serviceAccountKey.json" ‡πÉ‡∏ô directory scripts/');
    console.log('\n‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:');
    console.log('firebase login');
    console.log('firebase projects:list');
    process.exit(1);
}

// Initialize Firebase Admin
const serviceAccount = require('./serviceAccountKey.json');

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: `https://ecertonline-29a67.firebaseio.com`
});

const db = admin.firestore();

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Companies
 */
async function checkCompanies(): Promise<void> {
    console.log('\nüìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Companies:');
    console.log('=' .repeat(80));
    
    const snapshot = await db.collection('companies').get();
    
    console.log(`‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${snapshot.size} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£\n`);
    
    snapshot.docs.forEach((doc, index) => {
        const data = doc.data();
        console.log(`${index + 1}. ${data.name}`);
        console.log(`   ID: ${doc.id}`);
        console.log(`   Address: ${data.address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
        console.log(`   User ID: ${data.userId}`);
        console.log(`   Members: ${data.memberCount || 0}`);
        console.log(`   Logo Type: ${data.logoType || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
        console.log(`   Created: ${data.createdAt?.toDate().toLocaleString('th-TH') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
        console.log('');
    });
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Company Members
 */
async function checkCompanyMembers(): Promise<void> {
    console.log('\nüë• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Company Members:');
    console.log('=' .repeat(80));
    
    const snapshot = await db.collection('companyMembers').get();
    
    console.log(`‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${snapshot.size} ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n`);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° company
    const membersByCompany: { [key: string]: any[] } = {};
    
    snapshot.docs.forEach(doc => {
        const data = doc.data();
        if (!membersByCompany[data.companyId]) {
            membersByCompany[data.companyId] = [];
        }
        membersByCompany[data.companyId].push({
            id: doc.id,
            ...data
        });
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    for (const [companyId, members] of Object.entries(membersByCompany)) {
        console.log(`Company ID: ${companyId}`);
        console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${members.length}\n`);
        
        members.forEach((member, index) => {
            console.log(`   ${index + 1}. ${member.displayName || member.email}`);
            console.log(`      Email: ${member.email}`);
            console.log(`      Role: ${member.role}`);
            console.log(`      Status: ${member.status}`);
            console.log(`      User ID: ${member.userId}`);
            console.log('');
        });
    }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Delivery Notes
 */
async function checkDeliveryNotes(userId: string): Promise<void> {
    console.log('\nüì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Delivery Notes:');
    console.log('=' .repeat(80));
    
    const snapshot = await db.collection('deliveryNotes')
        .where('userId', '==', userId)
        .get();
    
    console.log(`‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${snapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° companyId
    const notesByCompany: { [key: string]: any[] } = {};
    
    snapshot.docs.forEach(doc => {
        const data = doc.data();
        const companyId = data.companyId || '‡πÑ‡∏°‡πà‡∏°‡∏µ company';
        
        if (!notesByCompany[companyId]) {
            notesByCompany[companyId] = [];
        }
        notesByCompany[companyId].push({
            id: doc.id,
            ...data
        });
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    for (const [companyId, notes] of Object.entries(notesByCompany)) {
        console.log(`Company ID: ${companyId}`);
        console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${notes.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
        
        notes.slice(0, 5).forEach((note, index) => {
            console.log(`   ${index + 1}. ${note.docNumber}`);
            console.log(`      ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ${note.project || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log(`      ‡∏à‡∏≤‡∏Å: ${note.fromCompany}`);
            console.log(`      ‡∏ñ‡∏∂‡∏á: ${note.toCompany}`);
            console.log(`      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${note.date?.toDate().toLocaleDateString('th-TH') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log('');
        });
        
        if (notes.length > 5) {
            console.log(`   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${notes.length - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
        }
    }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Warranty Cards
 */
async function checkWarrantyCards(userId: string): Promise<void> {
    console.log('\nüõ°Ô∏è  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Warranty Cards:');
    console.log('=' .repeat(80));
    
    const snapshot = await db.collection('warrantyCards')
        .where('userId', '==', userId)
        .get();
    
    console.log(`‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${snapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° companyId
    const cardsByCompany: { [key: string]: any[] } = {};
    
    snapshot.docs.forEach(doc => {
        const data = doc.data();
        const companyId = data.companyId || '‡πÑ‡∏°‡πà‡∏°‡∏µ company';
        
        if (!cardsByCompany[companyId]) {
            cardsByCompany[companyId] = [];
        }
        cardsByCompany[companyId].push({
            id: doc.id,
            ...data
        });
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    for (const [companyId, cards] of Object.entries(cardsByCompany)) {
        console.log(`Company ID: ${companyId}`);
        console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${cards.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
        
        cards.slice(0, 5).forEach((card, index) => {
            console.log(`   ${index + 1}. ${card.warrantyNumber || card.houseModel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log(`      ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${card.serviceName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log(`      ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ${card.projectName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log(`      ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${card.customerName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log(`      ‡∏£‡∏∞‡∏¢‡∏∞‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô: ${card.warrantyPeriod || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log('');
        });
        
        if (cards.length > 5) {
            console.log(`   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${cards.length - 5} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
        }
    }
}

/**
 * ‡∏´‡∏≤ User ID ‡∏à‡∏≤‡∏Å Email
 */
async function findUserIdByEmail(email: string): Promise<string | null> {
    try {
        const userRecord = await admin.auth().getUserByEmail(email);
        return userRecord.uid;
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö User ‡∏î‡πâ‡∏ß‡∏¢ email: ${email}`);
        return null;
    }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function listAllUsers(): Promise<void> {
    console.log('\nüë§ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    console.log('=' .repeat(80));
    
    const listUsersResult = await admin.auth().listUsers(10);
    
    listUsersResult.users.forEach((userRecord, index) => {
        console.log(`${index + 1}. ${userRecord.email || userRecord.phoneNumber}`);
        console.log(`   User ID: ${userRecord.uid}`);
        console.log(`   Display Name: ${userRecord.displayName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
        console.log(`   Provider: ${userRecord.providerData.map(p => p.providerId).join(', ')}`);
        console.log(`   Created: ${userRecord.metadata.creationTime}`);
        console.log('');
    });
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function showSummary(userId: string): Promise<void> {
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    console.log('=' .repeat(80));
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ collection
    const companiesCount = (await db.collection('companies').get()).size;
    const membersCount = (await db.collection('companyMembers').get()).size;
    
    const deliveryNotesCount = (await db.collection('deliveryNotes')
        .where('userId', '==', userId)
        .get()).size;
    
    const warrantyCardsCount = (await db.collection('warrantyCards')
        .where('userId', '==', userId)
        .get()).size;
    
    console.log(`üìÅ Companies: ${companiesCount} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£`);
    console.log(`üë• Company Members: ${membersCount} ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å`);
    console.log(`üì¶ Delivery Notes: ${deliveryNotesCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ç‡∏≠‡∏á User ‡∏ô‡∏µ‡πâ)`);
    console.log(`üõ°Ô∏è  Warranty Cards: ${warrantyCardsCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ç‡∏≠‡∏á User ‡∏ô‡∏µ‡πâ)`);
    console.log('=' .repeat(80));
}

/**
 * Main Function
 */
async function main() {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore (Firebase Admin SDK)');
    console.log('=' .repeat(80));
    
    try {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Users
        await listAllUsers();
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ USER_ID ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        if (!TARGET_USER_ID) {
            console.error('\n‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ USER_ID');
            console.log('\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:');
            console.log('USER_ID=abc123xyz npx ts-node scripts/check-firestore-admin.ts');
            console.log('\n‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡πâ Email:');
            console.log('USER_EMAIL=your@email.com npx ts-node scripts/check-firestore-admin.ts');
            process.exit(1);
        }
        
        let userId = TARGET_USER_ID;
        
        // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ EMAIL ‡πÅ‡∏ó‡∏ô USER_ID
        if (process.env.USER_EMAIL) {
            console.log(`\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ User ID ‡∏à‡∏≤‡∏Å Email: ${process.env.USER_EMAIL}`);
            const foundUserId = await findUserIdByEmail(process.env.USER_EMAIL);
            if (foundUserId) {
                userId = foundUserId;
                console.log(`‚úÖ ‡∏û‡∏ö User ID: ${userId}`);
            } else {
                process.exit(1);
            }
        }
        
        console.log(`\nüéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á User ID: ${userId}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
        await showSummary(userId);
        await checkCompanies();
        await checkCompanyMembers();
        await checkDeliveryNotes(userId);
        await checkWarrantyCards(userId);
        
        console.log('\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        process.exit(0);
    } catch (error) {
        console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
        process.exit(1);
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ main function
main();

