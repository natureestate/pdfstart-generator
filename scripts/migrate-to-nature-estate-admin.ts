/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Nature Estate Company
 * (‡πÉ‡∏ä‡πâ Firebase Admin SDK)
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô:
 * 1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Service Account Key ‡∏à‡∏≤‡∏Å Firebase Console
 * 2. ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà scripts/serviceAccountKey.json
 * 3. ‡∏£‡∏±‡∏ô: USER_ID=your-user-id npx ts-node scripts/migrate-to-nature-estate-admin.ts
 */

import * as admin from 'firebase-admin';
import * as path from 'path';
import * as fs from 'fs';

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ User ID ‡∏à‡∏≤‡∏Å environment variable
const TARGET_USER_ID = process.env.USER_ID || '';
const TARGET_COMPANY_NAME = "Nature Estate";

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Service Account Key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const serviceAccountPath = path.join(__dirname, 'serviceAccountKey.json');

if (!fs.existsSync(serviceAccountPath)) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå serviceAccountKey.json');
    console.log('\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Service Account Key:');
    console.log('1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://console.firebase.google.com/');
    console.log('2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project: ecertonline-29a67');
    console.log('3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Project Settings > Service accounts');
    console.log('4. ‡∏Ñ‡∏•‡∏¥‡∏Å "Generate new private key"');
    console.log('5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô "serviceAccountKey.json" ‡πÉ‡∏ô directory scripts/');
    process.exit(1);
}

// Initialize Firebase Admin
const serviceAccount = require('./serviceAccountKey.json');

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: `https://ecertonline-29a67.firebaseio.com`
});

const db = admin.firestore();

/**
 * ‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Nature Estate Company
 */
async function findOrCreateNatureEstateCompany(userId: string): Promise<string> {
    console.log('\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Nature Estate Company...');
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ company ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    const querySnapshot = await db.collection('companies')
        .where('name', '==', TARGET_COMPANY_NAME)
        .get();
    
    if (!querySnapshot.empty) {
        const companyDoc = querySnapshot.docs[0];
        console.log(`‚úÖ ‡∏û‡∏ö ${TARGET_COMPANY_NAME} ‡πÅ‡∏•‡πâ‡∏ß (ID: ${companyDoc.id})`);
        return companyDoc.id;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á company ‡πÉ‡∏´‡∏°‡πà
    console.log(`üìù ‡πÑ‡∏°‡πà‡∏û‡∏ö ${TARGET_COMPANY_NAME}, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...`);
    const newCompanyRef = db.collection('companies').doc();
    const companyId = newCompanyRef.id;
    
    await newCompanyRef.set({
        name: TARGET_COMPANY_NAME,
        address: '',
        userId: userId,
        logoUrl: null,
        logoType: 'default',
        defaultLogoUrl: null,
        memberCount: 1,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° admin member
    const memberRef = db.collection('companyMembers').doc();
    const userRecord = await admin.auth().getUser(userId);
    
    await memberRef.set({
        companyId: companyId,
        userId: userId,
        email: userRecord.email || '',
        phoneNumber: userRecord.phoneNumber || null,
        displayName: userRecord.displayName || 'Admin',
        role: 'admin',
        status: 'active',
        joinedAt: admin.firestore.FieldValue.serverTimestamp(),
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
    });
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${TARGET_COMPANY_NAME} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ID: ${companyId})`);
    return companyId;
}

/**
 * ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Delivery Notes
 */
async function migrateDeliveryNotes(companyId: string, userId: string): Promise<number> {
    console.log('\nüì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢ Delivery Notes...');
    
    const snapshot = await db.collection('deliveryNotes')
        .where('userId', '==', userId)
        .get();
    
    let migratedCount = 0;
    const batch = db.batch();
    let batchCount = 0;
    
    for (const docSnapshot of snapshot.docs) {
        const data = docSnapshot.data();
        
        // ‡∏Ç‡πâ‡∏≤‡∏° document ‡∏ó‡∏µ‡πà‡∏°‡∏µ companyId ‡πÄ‡∏õ‡πá‡∏ô Nature Estate ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if (data.companyId === companyId) {
            console.log(`‚è≠Ô∏è  ${docSnapshot.id} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Nature Estate ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
            continue;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï companyId
        batch.update(docSnapshot.ref, {
            companyId: companyId,
            updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        });
        
        console.log(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Delivery Note: ${docSnapshot.id} (${data.docNumber})`);
        migratedCount++;
        batchCount++;
        
        // Firestore batch limit is 500 operations
        if (batchCount >= 450) {
            await batch.commit();
            batchCount = 0;
        }
    }
    
    // Commit remaining batch
    if (batchCount > 0) {
        await batch.commit();
    }
    
    console.log(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Delivery Notes ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${migratedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    return migratedCount;
}

/**
 * ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Warranty Cards
 */
async function migrateWarrantyCards(companyId: string, userId: string): Promise<number> {
    console.log('\nüõ°Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢ Warranty Cards...');
    
    const snapshot = await db.collection('warrantyCards')
        .where('userId', '==', userId)
        .get();
    
    let migratedCount = 0;
    const batch = db.batch();
    let batchCount = 0;
    
    for (const docSnapshot of snapshot.docs) {
        const data = docSnapshot.data();
        
        // ‡∏Ç‡πâ‡∏≤‡∏° document ‡∏ó‡∏µ‡πà‡∏°‡∏µ companyId ‡πÄ‡∏õ‡πá‡∏ô Nature Estate ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if (data.companyId === companyId) {
            console.log(`‚è≠Ô∏è  ${docSnapshot.id} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Nature Estate ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
            continue;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï companyId
        batch.update(docSnapshot.ref, {
            companyId: companyId,
            updatedAt: admin.firestore.FieldValue.serverTimestamp(),
        });
        
        console.log(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Warranty Card: ${docSnapshot.id} (${data.warrantyNumber || data.houseModel})`);
        migratedCount++;
        batchCount++;
        
        // Firestore batch limit is 500 operations
        if (batchCount >= 450) {
            await batch.commit();
            batchCount = 0;
        }
    }
    
    // Commit remaining batch
    if (batchCount > 0) {
        await batch.commit();
    }
    
    console.log(`‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ Warranty Cards ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${migratedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    return migratedCount;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
async function showCurrentStats(userId: string): Promise<void> {
    console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    
    // ‡∏ô‡∏±‡∏ö Companies
    const companiesSnapshot = await db.collection('companies').get();
    console.log(`   üìÅ Companies: ${companiesSnapshot.size} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£`);
    
    companiesSnapshot.docs.forEach(doc => {
        const data = doc.data();
        console.log(`      - ${data.name} (ID: ${doc.id}, Members: ${data.memberCount || 0})`);
    });
    
    // ‡∏ô‡∏±‡∏ö Delivery Notes
    const deliveryNotesSnapshot = await db.collection('deliveryNotes')
        .where('userId', '==', userId)
        .get();
    console.log(`   üì¶ Delivery Notes: ${deliveryNotesSnapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î delivery notes ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° company
    const deliveryByCompany: { [key: string]: number } = {};
    deliveryNotesSnapshot.docs.forEach(doc => {
        const data = doc.data();
        const companyId = data.companyId || '‡πÑ‡∏°‡πà‡∏°‡∏µ company';
        deliveryByCompany[companyId] = (deliveryByCompany[companyId] || 0) + 1;
    });
    Object.entries(deliveryByCompany).forEach(([companyId, count]) => {
        console.log(`      - ${companyId}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
    // ‡∏ô‡∏±‡∏ö Warranty Cards
    const warrantyCardsSnapshot = await db.collection('warrantyCards')
        .where('userId', '==', userId)
        .get();
    console.log(`   üõ°Ô∏è  Warranty Cards: ${warrantyCardsSnapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î warranty cards ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° company
    const warrantyByCompany: { [key: string]: number } = {};
    warrantyCardsSnapshot.docs.forEach(doc => {
        const data = doc.data();
        const companyId = data.companyId || '‡πÑ‡∏°‡πà‡∏°‡∏µ company';
        warrantyByCompany[companyId] = (warrantyByCompany[companyId] || 0) + 1;
    });
    Object.entries(warrantyByCompany).forEach(([companyId, count]) => {
        console.log(`      - ${companyId}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
    // ‡∏ô‡∏±‡∏ö Company Members
    const membersSnapshot = await db.collection('companyMembers').get();
    console.log(`   üë• Company Members: ${membersSnapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
}

/**
 * ‡∏´‡∏≤ User ID ‡∏à‡∏≤‡∏Å Email
 */
async function findUserIdByEmail(email: string): Promise<string | null> {
    try {
        const userRecord = await admin.auth().getUserByEmail(email);
        return userRecord.uid;
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö User ‡∏î‡πâ‡∏ß‡∏¢ email: ${email}`);
        return null;
    }
}

/**
 * Main Migration Function
 */
async function main() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Migration Script (Firebase Admin SDK)');
    console.log('=' .repeat(60));
    
    try {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ USER_ID ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        if (!TARGET_USER_ID && !process.env.USER_EMAIL) {
            console.error('\n‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ USER_ID ‡∏´‡∏£‡∏∑‡∏≠ USER_EMAIL');
            console.log('\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:');
            console.log('USER_ID=abc123xyz npx ts-node scripts/migrate-to-nature-estate-admin.ts');
            console.log('‡∏´‡∏£‡∏∑‡∏≠');
            console.log('USER_EMAIL=your@email.com npx ts-node scripts/migrate-to-nature-estate-admin.ts');
            process.exit(1);
        }
        
        let userId = TARGET_USER_ID;
        
        // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ EMAIL ‡πÅ‡∏ó‡∏ô USER_ID
        if (process.env.USER_EMAIL) {
            console.log(`\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ User ID ‡∏à‡∏≤‡∏Å Email: ${process.env.USER_EMAIL}`);
            const foundUserId = await findUserIdByEmail(process.env.USER_EMAIL);
            if (foundUserId) {
                userId = foundUserId;
                console.log(`‚úÖ ‡∏û‡∏ö User ID: ${userId}`);
            } else {
                process.exit(1);
            }
        }
        
        console.log(`\nüéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Migrate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á User ID: ${userId}`);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô migration
        await showCurrentStats(userId);
        
        // ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á Nature Estate Company
        const natureEstateId = await findOrCreateNatureEstateCompany(userId);
        
        // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô migration
        console.log('\n‚ö†Ô∏è  ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Nature Estate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
        console.log('   ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏° Migration
        console.log('\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Migration...');
        console.log('=' .repeat(60));
        
        const deliveryCount = await migrateDeliveryNotes(natureEstateId, userId);
        const warrantyCount = await migrateWarrantyCards(natureEstateId, userId);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á migration
        console.log('\n' + '=' .repeat(60));
        await showCurrentStats(userId);
        
        // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        console.log('\n' + '=' .repeat(60));
        console.log('‚úÖ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        console.log(`   üì¶ ‡∏¢‡πâ‡∏≤‡∏¢ Delivery Notes: ${deliveryCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   üõ°Ô∏è  ‡∏¢‡πâ‡∏≤‡∏¢ Warranty Cards: ${warrantyCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        console.log(`   üéØ ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: ${TARGET_COMPANY_NAME} (ID: ${natureEstateId})`);
        console.log('=' .repeat(60));
        
        process.exit(0);
    } catch (error) {
        console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
        process.exit(1);
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ main function
main();

