#!/usr/bin/env node

/**
 * Script ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore (‡πÉ‡∏ä‡πâ Firebase CLI)
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô:
 * node scripts/check-data.js
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs, query, where } = require('firebase/firestore');
const { getAuth } = require('firebase/auth');

// Firebase Configuration
const firebaseConfig = {
    apiKey: "AIzaSyBy4f-C66l03f4-ODOO_aGyseaIDmDb7tk",
    authDomain: "ecertonline-29a67.firebaseapp.com",
    projectId: "ecertonline-29a67",
    storageBucket: "ecertonline-29a67.firebasestorage.app",
    messagingSenderId: "457246107908",
    appId: "1:457246107908:web:1008539ce20637935c8851"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

/**
 * ‡∏£‡∏≠‡πÉ‡∏´‡πâ user login
 */
async function waitForAuth() {
    return new Promise((resolve, reject) => {
        const unsubscribe = auth.onAuthStateChanged(user => {
            unsubscribe();
            if (user) {
                resolve(user);
            } else {
                reject(new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô'));
            }
        }, reject);
    });
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Companies
 */
async function checkCompanies() {
    console.log('\nüìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Companies:');
    console.log('=' .repeat(80));
    
    const snapshot = await getDocs(collection(db, 'companies'));
    
    console.log(`‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${snapshot.size} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£\n`);
    
    snapshot.docs.forEach((doc, index) => {
        const data = doc.data();
        console.log(`${index + 1}. ${data.name}`);
        console.log(`   ID: ${doc.id}`);
        console.log(`   Address: ${data.address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
        console.log(`   User ID: ${data.userId}`);
        console.log(`   Members: ${data.memberCount || 0}`);
        console.log(`   Created: ${data.createdAt?.toDate().toLocaleString('th-TH') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
        console.log('');
    });
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Delivery Notes
 */
async function checkDeliveryNotes(userId) {
    console.log('\nüì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Delivery Notes:');
    console.log('=' .repeat(80));
    
    const q = query(collection(db, 'deliveryNotes'), where('userId', '==', userId));
    const snapshot = await getDocs(q);
    
    console.log(`‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${snapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° companyId
    const notesByCompany = {};
    
    snapshot.docs.forEach(doc => {
        const data = doc.data();
        const companyId = data.companyId || '‡πÑ‡∏°‡πà‡∏°‡∏µ company';
        
        if (!notesByCompany[companyId]) {
            notesByCompany[companyId] = [];
        }
        notesByCompany[companyId].push({
            id: doc.id,
            ...data
        });
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    for (const [companyId, notes] of Object.entries(notesByCompany)) {
        console.log(`Company ID: ${companyId}`);
        console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${notes.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
        
        notes.slice(0, 3).forEach((note, index) => {
            console.log(`   ${index + 1}. ${note.docNumber}`);
            console.log(`      ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ${note.project || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log(`      ‡∏à‡∏≤‡∏Å: ${note.fromCompany}`);
            console.log(`      ‡∏ñ‡∏∂‡∏á: ${note.toCompany}`);
            console.log('');
        });
        
        if (notes.length > 3) {
            console.log(`   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${notes.length - 3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
        }
    }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Warranty Cards
 */
async function checkWarrantyCards(userId) {
    console.log('\nüõ°Ô∏è  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Warranty Cards:');
    console.log('=' .repeat(80));
    
    const q = query(collection(db, 'warrantyCards'), where('userId', '==', userId));
    const snapshot = await getDocs(q);
    
    console.log(`‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${snapshot.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° companyId
    const cardsByCompany = {};
    
    snapshot.docs.forEach(doc => {
        const data = doc.data();
        const companyId = data.companyId || '‡πÑ‡∏°‡πà‡∏°‡∏µ company';
        
        if (!cardsByCompany[companyId]) {
            cardsByCompany[companyId] = [];
        }
        cardsByCompany[companyId].push({
            id: doc.id,
            ...data
        });
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    for (const [companyId, cards] of Object.entries(cardsByCompany)) {
        console.log(`Company ID: ${companyId}`);
        console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${cards.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
        
        cards.slice(0, 3).forEach((card, index) => {
            console.log(`   ${index + 1}. ${card.warrantyNumber || card.houseModel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log(`      ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${card.serviceName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log(`      ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${card.customerName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            console.log('');
        });
        
        if (cards.length > 3) {
            console.log(`   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${cards.length - 3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
        }
    }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
async function showSummary(userId) {
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    console.log('=' .repeat(80));
    
    const companiesCount = (await getDocs(collection(db, 'companies'))).size;
    const deliveryNotesCount = (await getDocs(query(collection(db, 'deliveryNotes'), where('userId', '==', userId)))).size;
    const warrantyCardsCount = (await getDocs(query(collection(db, 'warrantyCards'), where('userId', '==', userId)))).size;
    
    console.log(`üìÅ Companies: ${companiesCount} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£`);
    console.log(`üì¶ Delivery Notes: ${deliveryNotesCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üõ°Ô∏è  Warranty Cards: ${warrantyCardsCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log('=' .repeat(80));
}

/**
 * Main Function
 */
async function main() {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore');
    console.log('=' .repeat(80));
    console.log('\n‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Script ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ User ‡∏ó‡∏µ‡πà Login ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    console.log('‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Login ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô Browser ‡πÅ‡∏•‡∏∞ Login ‡∏Å‡πà‡∏≠‡∏ô\n');
    
    try {
        console.log('‚è≥ ‡∏£‡∏≠ Authentication...');
        const user = await waitForAuth();
        
        console.log(`‚úÖ Login ‡πÅ‡∏•‡πâ‡∏ß: ${user.email}`);
        console.log(`   User ID: ${user.uid}\n`);
        
        await showSummary(user.uid);
        await checkCompanies();
        await checkDeliveryNotes(user.uid);
        await checkWarrantyCards(user.uid);
        
        console.log('\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        console.log('\nüí° ‡∏ó‡∏¥‡∏õ: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:');
        console.log('   node scripts/migrate-data.js');
        
        process.exit(0);
    } catch (error) {
        console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        console.log('\nüí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô Browser ‡πÅ‡∏•‡∏∞ Login ‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏Å‡πà‡∏≠‡∏ô');
        console.log('   URL: http://localhost:3000');
        process.exit(1);
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ main function
main();

