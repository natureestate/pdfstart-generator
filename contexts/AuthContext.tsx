/**
 * Auth Context
 * Context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Authentication ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ
 */

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User } from 'firebase/auth';
import { onAuthStateChanged } from '../services/auth';

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auth Context
interface AuthContextType {
    user: User | null;
    loading: boolean;
    isAuthenticated: boolean;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Context
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Props ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Provider
interface AuthProviderProps {
    children: ReactNode;
}

/**
 * Auth Provider Component
 * Wrap ‡πÅ‡∏≠‡∏õ‡∏î‡πâ‡∏ß‡∏¢ component ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å component ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á auth state ‡πÑ‡∏î‡πâ
 */
export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState<boolean>(true);

    useEffect(() => {
        // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ Login
        const unsubscribe = onAuthStateChanged((currentUser) => {
            setUser(currentUser);
            setLoading(false);
            
            if (currentUser) {
                console.log('üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login:', {
                    name: currentUser.displayName,
                    email: currentUser.email,
                    uid: currentUser.uid,
                });
            } else {
                console.log('üë§ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login');
            }
        });

        // Cleanup subscription ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
        return () => unsubscribe();
    }, []);

    const value: AuthContextType = {
        user,
        loading,
        isAuthenticated: user !== null,
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

/**
 * Custom Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ Auth Context
 * @returns AuthContextType
 * @throws Error ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ô‡∏≠‡∏Å AuthProvider
 */
export const useAuth = (): AuthContextType => {
    const context = useContext(AuthContext);
    
    if (context === undefined) {
        throw new Error('useAuth ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô AuthProvider');
    }
    
    return context;
};
