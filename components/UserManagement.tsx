/**
 * User Management Component
 * Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 */

import React, { useState, useEffect } from 'react';
import { CompanyMember, UserRole } from '../types';
import {
    getCompanyMembers,
    addCompanyMember,
    updateMemberRole,
    removeMember,
    checkIsAdmin,
    updateMemberCount,
} from '../services/companyMembers';
import { useAuth } from '../contexts/AuthContext';

interface UserManagementProps {
    companyId: string;
    companyName: string;
    onClose?: () => void;
}

/**
 * Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 */
const UserManagement: React.FC<UserManagementProps> = ({ companyId, companyName, onClose }) => {
    const { user } = useAuth();
    const [members, setMembers] = useState<CompanyMember[]>([]);
    const [isAdmin, setIsAdmin] = useState(false);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    
    // Form state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    const [newMemberEmail, setNewMemberEmail] = useState('');
    const [newMemberRole, setNewMemberRole] = useState<UserRole>('member');
    const [adding, setAdding] = useState(false);

    /**
     * ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    const loadMembers = async () => {
        try {
            setLoading(true);
            setError(null);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (user) {
                const adminStatus = await checkIsAdmin(companyId, user.uid);
                setIsAdmin(adminStatus);
            }

            // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            const membersList = await getCompanyMembers(companyId);
            setMembers(membersList);
        } catch (err: any) {
            console.error('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
            setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
        } finally {
            setLoading(false);
        }
    };

    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
     */
    const handleAddMember = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!newMemberEmail.trim()) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
            return;
        }

        try {
            setAdding(true);
            setError(null);

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            await addCompanyMember(companyId, newMemberEmail.trim(), newMemberRole);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            await updateMemberCount(companyId);

            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            await loadMembers();

            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°
            setNewMemberEmail('');
            setNewMemberRole('member');

            alert(`‚úÖ ‡πÄ‡∏ä‡∏¥‡∏ç ${newMemberEmail} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } catch (err: any) {
            console.error('‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
            setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
        } finally {
            setAdding(false);
        }
    };

    /**
     * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    const handleChangeRole = async (memberId: string, currentRole: UserRole) => {
        const newRole: UserRole = currentRole === 'admin' ? 'member' : 'admin';
        
        if (!confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πá‡∏ô ${newRole === 'admin' ? 'Admin' : 'Member'} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            return;
        }

        try {
            await updateMemberRole(memberId, newRole);
            await loadMembers();
            alert('‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (err: any) {
            console.error('‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
            alert(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏î‡πâ');
        }
    };

    /**
     * ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    const handleRemoveMember = async (memberId: string, memberEmail: string) => {
        if (!confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ${memberEmail} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            return;
        }

        try {
            await removeMember(memberId);
            await updateMemberCount(companyId);
            await loadMembers();
            alert('‚úÖ ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (err: any) {
            console.error('‚ùå ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
            alert(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
        }
    };

    /**
     * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
     */
    useEffect(() => {
        loadMembers();
    }, [companyId]);

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
     */
    if (loading) {
        return (
            <div className="user-management-container">
                <div className="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
            </div>
        );
    }

    return (
        <div className="user-management-container">
            <div className="user-management-header">
                <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: {companyName}</h2>
                {onClose && (
                    <button onClick={onClose} className="close-button">
                        ‚úï
                    </button>
                )}
            </div>

            {error && (
                <div className="error-message">
                    ‚ö†Ô∏è {error}
                </div>
            )}

            {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin) */}
            {isAdmin && (
                <div className="add-member-section">
                    <h3>‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà</h3>
                    <form onSubmit={handleAddMember} className="add-member-form">
                        <div className="form-group">
                            <label htmlFor="email">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
                            <input
                                type="email"
                                id="email"
                                value={newMemberEmail}
                                onChange={(e) => setNewMemberEmail(e.target.value)}
                                placeholder="example@email.com"
                                required
                                disabled={adding}
                            />
                        </div>

                        <div className="form-group">
                            <label htmlFor="role">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:</label>
                            <select
                                id="role"
                                value={newMemberRole}
                                onChange={(e) => setNewMemberRole(e.target.value as UserRole)}
                                disabled={adding}
                            >
                                <option value="member">Member (‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)</option>
                                <option value="admin">Admin (‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£)</option>
                            </select>
                        </div>

                        <button type="submit" disabled={adding} className="btn-primary">
                            {adding ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...' : '+ ‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'}
                        </button>
                    </form>
                </div>
            )}

            {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å */}
            <div className="members-list-section">
                <h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ({members.length} ‡∏Ñ‡∏ô)</h3>
                
                {members.length === 0 ? (
                    <div className="no-members">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£</div>
                ) : (
                    <div className="members-table">
                        <table>
                            <thead>
                                <tr>
                                    <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                                    <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                                    <th>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</th>
                                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</th>
                                    {isAdmin && <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>}
                                </tr>
                            </thead>
                            <tbody>
                                {members.map((member) => (
                                    <tr key={member.id}>
                                        <td>{member.email}</td>
                                        <td>{member.displayName || '-'}</td>
                                        <td>{member.phoneNumber || '-'}</td>
                                        <td>
                                            <span className={`role-badge ${member.role}`}>
                                                {member.role === 'admin' ? 'üëë Admin' : 'üë§ Member'}
                                            </span>
                                        </td>
                                        <td>
                                            <span className={`status-badge ${member.status}`}>
                                                {member.status === 'active' ? '‚úÖ Active' : 
                                                 member.status === 'pending' ? '‚è≥ Pending' : 
                                                 '‚ùå Inactive'}
                                            </span>
                                        </td>
                                        <td>
                                            {member.joinedAt 
                                                ? member.joinedAt.toLocaleDateString('th-TH')
                                                : '-'}
                                        </td>
                                        {isAdmin && (
                                            <td className="actions-cell">
                                                {member.userId !== user?.uid && (
                                                    <>
                                                        <button
                                                            onClick={() => handleChangeRole(member.id!, member.role)}
                                                            className="btn-small btn-secondary"
                                                            title="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"
                                                        >
                                                            üîÑ
                                                        </button>
                                                        <button
                                                            onClick={() => handleRemoveMember(member.id!, member.email)}
                                                            className="btn-small btn-danger"
                                                            title="‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"
                                                        >
                                                            üóëÔ∏è
                                                        </button>
                                                    </>
                                                )}
                                                {member.userId === user?.uid && (
                                                    <span className="self-indicator">(‡∏Ñ‡∏∏‡∏ì)</span>
                                                )}
                                            </td>
                                        )}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>

            <style>{`
                .user-management-container {
                    padding: 20px;
                    max-width: 1200px;
                    margin: 0 auto;
                }

                .user-management-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 20px;
                    padding-bottom: 10px;
                    border-bottom: 2px solid #e0e0e0;
                }

                .user-management-header h2 {
                    margin: 0;
                    color: #333;
                }

                .close-button {
                    background: #f44336;
                    color: white;
                    border: none;
                    border-radius: 50%;
                    width: 32px;
                    height: 32px;
                    font-size: 18px;
                    cursor: pointer;
                    transition: background 0.3s;
                }

                .close-button:hover {
                    background: #d32f2f;
                }

                .loading {
                    text-align: center;
                    padding: 40px;
                    color: #666;
                }

                .error-message {
                    background: #ffebee;
                    color: #c62828;
                    padding: 12px;
                    border-radius: 4px;
                    margin-bottom: 20px;
                }

                .add-member-section {
                    background: #f5f5f5;
                    padding: 20px;
                    border-radius: 8px;
                    margin-bottom: 30px;
                }

                .add-member-section h3 {
                    margin-top: 0;
                    color: #333;
                }

                .add-member-form {
                    display: flex;
                    gap: 15px;
                    align-items: flex-end;
                    flex-wrap: wrap;
                }

                .form-group {
                    flex: 1;
                    min-width: 200px;
                }

                .form-group label {
                    display: block;
                    margin-bottom: 5px;
                    font-weight: 500;
                    color: #555;
                }

                .form-group input,
                .form-group select {
                    width: 100%;
                    padding: 10px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    font-size: 14px;
                }

                .form-group input:focus,
                .form-group select:focus {
                    outline: none;
                    border-color: #2196F3;
                }

                .btn-primary {
                    background: #2196F3;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 14px;
                    font-weight: 500;
                    transition: background 0.3s;
                }

                .btn-primary:hover:not(:disabled) {
                    background: #1976D2;
                }

                .btn-primary:disabled {
                    background: #ccc;
                    cursor: not-allowed;
                }

                .members-list-section {
                    margin-top: 30px;
                }

                .members-list-section h3 {
                    margin-bottom: 15px;
                    color: #333;
                }

                .no-members {
                    text-align: center;
                    padding: 40px;
                    color: #999;
                    background: #f9f9f9;
                    border-radius: 4px;
                }

                .members-table {
                    overflow-x: auto;
                }

                .members-table table {
                    width: 100%;
                    border-collapse: collapse;
                    background: white;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }

                .members-table th,
                .members-table td {
                    padding: 12px;
                    text-align: left;
                    border-bottom: 1px solid #e0e0e0;
                }

                .members-table th {
                    background: #f5f5f5;
                    font-weight: 600;
                    color: #555;
                }

                .members-table tr:hover {
                    background: #f9f9f9;
                }

                .role-badge,
                .status-badge {
                    display: inline-block;
                    padding: 4px 12px;
                    border-radius: 12px;
                    font-size: 12px;
                    font-weight: 500;
                }

                .role-badge.admin {
                    background: #fff3e0;
                    color: #e65100;
                }

                .role-badge.member {
                    background: #e3f2fd;
                    color: #1565c0;
                }

                .status-badge.active {
                    background: #e8f5e9;
                    color: #2e7d32;
                }

                .status-badge.pending {
                    background: #fff3e0;
                    color: #f57c00;
                }

                .status-badge.inactive {
                    background: #ffebee;
                    color: #c62828;
                }

                .actions-cell {
                    display: flex;
                    gap: 8px;
                    align-items: center;
                }

                .btn-small {
                    border: none;
                    padding: 6px 10px;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: opacity 0.3s;
                }

                .btn-small:hover {
                    opacity: 0.8;
                }

                .btn-secondary {
                    background: #2196F3;
                    color: white;
                }

                .btn-danger {
                    background: #f44336;
                    color: white;
                }

                .self-indicator {
                    color: #666;
                    font-size: 12px;
                    font-style: italic;
                }

                @media (max-width: 768px) {
                    .add-member-form {
                        flex-direction: column;
                    }

                    .form-group {
                        width: 100%;
                    }

                    .members-table {
                        font-size: 12px;
                    }

                    .members-table th,
                    .members-table td {
                        padding: 8px;
                    }
                }
            `}</style>
        </div>
    );
};

export default UserManagement;

