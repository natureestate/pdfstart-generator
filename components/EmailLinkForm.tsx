/**
 * Email Link Authentication Form
 * Form ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Passwordless Login ‡∏î‡πâ‡∏ß‡∏¢ Email Link
 */

import React, { useState, useEffect } from 'react';
import { sendEmailLoginLink, checkIsEmailLink, signInWithEmailLinkAuth } from '../services/auth';

interface EmailLinkFormProps {
    onSuccess?: () => void;
}

export const EmailLinkForm: React.FC<EmailLinkFormProps> = ({ onSuccess }) => {
    const [email, setEmail] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [isVerifying, setIsVerifying] = useState(false);

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô Email Link ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     * (‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡∏Ñ‡∏•‡∏¥‡∏Å link ‡∏à‡∏≤‡∏Å email)
     */
    useEffect(() => {
        const verifyEmailLink = async () => {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô email link ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (checkIsEmailLink()) {
                console.log('üîó ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Email Link, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô...');
                setIsVerifying(true);
                setError(null);

                try {
                    // ‡∏î‡∏∂‡∏á email ‡∏à‡∏≤‡∏Å localStorage
                    const savedEmail = window.localStorage.getItem('emailForSignIn');
                    
                    if (!savedEmail) {
                        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ email ‡πÉ‡∏ô localStorage ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
                        setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á link');
                        setIsVerifying(false);
                        return;
                    }

                    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô email link
                    await signInWithEmailLinkAuth(savedEmail);
                    setSuccess('‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    if (onSuccess) {
                        setTimeout(() => onSuccess(), 500);
                    }
                } catch (err: any) {
                    console.error('‚ùå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email Link ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
                    setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email Link ‡πÑ‡∏î‡πâ');
                } finally {
                    setIsVerifying(false);
                }
            }
        };

        verifyEmailLink();
    }, [onSuccess]);

    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email Link
     */
    const handleSendLink = async (e: React.FormEvent) => {
        e.preventDefault();
        setError(null);
        setSuccess(null);

        // Validation
        if (!email) {
            setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
            return;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            setError('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            return;
        }

        try {
            setLoading(true);
            await sendEmailLoginLink(email);
            setSuccess('‚úÖ ‡∏™‡πà‡∏á Email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
            setEmail(''); // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        } catch (err: any) {
            setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email');
        } finally {
            setLoading(false);
        }
    };

    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email Link (‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å email ‡πÄ‡∏≠‡∏á)
     */
    const handleManualVerify = async (e: React.FormEvent) => {
        e.preventDefault();
        setError(null);
        setSuccess(null);

        if (!email) {
            setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•');
            return;
        }

        try {
            setIsVerifying(true);
            await signInWithEmailLinkAuth(email);
            setSuccess('‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (onSuccess) {
                setTimeout(() => onSuccess(), 500);
            }
        } catch (err: any) {
            setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email Link ‡πÑ‡∏î‡πâ');
        } finally {
            setIsVerifying(false);
        }
    };

    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email Link
    if (isVerifying) {
        return (
            <div className="w-full max-w-md mx-auto text-center">
                <div className="flex flex-col items-center justify-center space-y-4">
                    <svg
                        className="animate-spin h-12 w-12 text-blue-600"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                    >
                        <circle
                            className="opacity-25"
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            strokeWidth="4"
                        ></circle>
                        <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                    </svg>
                    <p className="text-lg font-medium text-gray-700">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email Link...</p>
                    <p className="text-sm text-gray-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</p>
                </div>
            </div>
        );
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Email Link ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ email ‡πÉ‡∏ô localStorage
    if (checkIsEmailLink() && !window.localStorage.getItem('emailForSignIn')) {
        return (
            <div className="w-full max-w-md mx-auto">
                <div className="mb-6 text-center">
                    <h3 className="text-xl font-semibold text-gray-800 mb-2">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email</h3>
                    <p className="text-sm text-gray-600">
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á link ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
                    </p>
                </div>

                <form onSubmit={handleManualVerify} className="space-y-4">
                    <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                            ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                        </label>
                        <input
                            type="email"
                            id="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            placeholder="example@email.com"
                            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            disabled={isVerifying}
                            required
                        />
                    </div>

                    {error && (
                        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                            <p className="text-sm text-red-600">{error}</p>
                        </div>
                    )}

                    <button
                        type="submit"
                        disabled={isVerifying}
                        className={`w-full py-3 px-4 rounded-lg font-medium text-white transition-colors ${
                            isVerifying
                                ? 'bg-gray-400 cursor-not-allowed'
                                : 'bg-blue-600 hover:bg-blue-700 active:bg-blue-800'
                        }`}
                    >
                        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
                    </button>
                </form>
            </div>
        );
    }

    // Form ‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á Email Link
    return (
        <div className="w-full max-w-md mx-auto">
            <div className="mb-6 text-center">
                <h3 className="text-xl font-semibold text-gray-800 mb-2">Login ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h3>
                <p className="text-sm text-gray-600">
                    ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á link ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏•‡∏¥‡∏Å link ‡πÄ‡∏û‡∏∑‡πà‡∏≠ login ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                </p>
            </div>

            <form onSubmit={handleSendLink} className="space-y-4">
                {/* Email Input */}
                <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                        ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                    </label>
                    <input
                        type="email"
                        id="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        placeholder="example@email.com"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        disabled={loading}
                        required
                    />
                </div>

                {/* Error Message */}
                {error && (
                    <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                        <p className="text-sm text-red-600">{error}</p>
                    </div>
                )}

                {/* Success Message */}
                {success && (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                        <p className="text-sm text-green-600">{success}</p>
                        <p className="text-xs text-green-500 mt-1">
                            üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Spam
                        </p>
                    </div>
                )}

                {/* Submit Button */}
                <button
                    type="submit"
                    disabled={loading}
                    className={`w-full py-3 px-4 rounded-lg font-medium text-white transition-colors ${
                        loading
                            ? 'bg-gray-400 cursor-not-allowed'
                            : 'bg-purple-600 hover:bg-purple-700 active:bg-purple-800'
                    }`}
                >
                    {loading ? (
                        <span className="flex items-center justify-center">
                            <svg
                                className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                            >
                                <circle
                                    className="opacity-25"
                                    cx="12"
                                    cy="12"
                                    r="10"
                                    stroke="currentColor"
                                    strokeWidth="4"
                                ></circle>
                                <path
                                    className="opacity-75"
                                    fill="currentColor"
                                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                ></path>
                            </svg>
                            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Email...
                        </span>
                    ) : (
                        'üìß ‡∏™‡πà‡∏á Link ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•'
                    )}
                </button>

                {/* Info */}
                <div className="text-center text-xs text-gray-500">
                    <p>Link ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
                </div>
            </form>
        </div>
    );
};

