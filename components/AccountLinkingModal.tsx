/**
 * Account Linking Modal
 * Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Account Linking
 */

import React, { useState } from 'react';
import { linkWithGoogle, linkWithEmailPassword, signInWithGoogle, checkEmailProviders } from '../services/auth';

interface AccountLinkingModalProps {
    isOpen: boolean;
    onClose: () => void;
    email: string;
    existingProviders: string[]; // providers ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    currentProvider: 'email' | 'google'; // provider ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° login
}

export const AccountLinkingModal: React.FC<AccountLinkingModalProps> = ({
    isOpen,
    onClose,
    email,
    existingProviders,
    currentProvider,
}) => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [password, setPassword] = useState('');
    const [showPasswordInput, setShowPasswordInput] = useState(false);

    if (!isOpen) return null;

    /**
     * ‡πÅ‡∏õ‡∏•‡∏á provider ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
     */
    const getProviderName = (providerId: string): string => {
        switch (providerId) {
            case 'google.com':
                return 'Google';
            case 'password':
                return 'Email/Password';
            case 'phone':
                return '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
            default:
                return providerId;
        }
    };

    /**
     * Login ‡∏î‡πâ‡∏ß‡∏¢ Provider ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
     */
    const handleLoginWithExisting = async () => {
        setLoading(true);
        setError(null);

        try {
            if (existingProviders.includes('google.com')) {
                // Login ‡∏î‡πâ‡∏ß‡∏¢ Google
                await signInWithGoogle();
                onClose();
            } else if (existingProviders.includes('password')) {
                // ‡πÅ‡∏™‡∏î‡∏á input password
                setShowPasswordInput(true);
                setLoading(false);
            }
        } catch (err: any) {
            setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
            setLoading(false);
        }
    };

    /**
     * Login ‡∏î‡πâ‡∏ß‡∏¢ Google ‡πÅ‡∏•‡πâ‡∏ß Link ‡∏Å‡∏±‡∏ö Email/Password
     */
    const handleLinkAfterGoogleLogin = async () => {
        setLoading(true);
        setError(null);

        try {
            // 1. Login ‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏Å‡πà‡∏≠‡∏ô
            await signInWithGoogle();
            
            // 2. ‡πÅ‡∏™‡∏î‡∏á input password ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Link
            setShowPasswordInput(true);
            setLoading(false);
        } catch (err: any) {
            setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
            setLoading(false);
        }
    };

    /**
     * Link Email/Password ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Login ‡∏î‡πâ‡∏ß‡∏¢ Google ‡πÅ‡∏•‡πâ‡∏ß
     */
    const handleLinkEmailPassword = async (e: React.FormEvent) => {
        e.preventDefault();
        
        if (!password) {
            setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
            return;
        }

        setLoading(true);
        setError(null);

        try {
            await linkWithEmailPassword(email, password);
            alert('‚úÖ Link ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Login ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á Google ‡πÅ‡∏•‡∏∞ Email/Password');
            onClose();
        } catch (err: any) {
            setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Link ‡πÑ‡∏î‡πâ');
        } finally {
            setLoading(false);
        }
    };

    /**
     * Link Google ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Login ‡∏î‡πâ‡∏ß‡∏¢ Email/Password ‡πÅ‡∏•‡πâ‡∏ß
     */
    const handleLinkGoogle = async () => {
        setLoading(true);
        setError(null);

        try {
            await linkWithGoogle();
            alert('‚úÖ Link ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Login ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á Google ‡πÅ‡∏•‡∏∞ Email/Password');
            onClose();
        } catch (err: any) {
            setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Link ‡πÑ‡∏î‡πâ');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6">
                {/* Header */}
                <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-gray-800">
                        üîó Account Linking
                    </h3>
                    <button
                        onClick={onClose}
                        className="text-gray-400 hover:text-gray-600 transition-colors"
                    >
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                {/* Content */}
                <div className="space-y-4">
                    {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <p className="text-sm text-blue-800">
                            <strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> {email}
                        </p>
                        <p className="text-sm text-blue-800 mt-2">
                            ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Login ‡∏î‡πâ‡∏ß‡∏¢:{' '}
                            <strong>{existingProviders.map(getProviderName).join(', ')}</strong>
                        </p>
                    </div>

                    {/* ‡πÅ‡∏™‡∏î‡∏á Password Input (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) */}
                    {showPasswordInput ? (
                        <form onSubmit={handleLinkEmailPassword} className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                    ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Email/Password Login
                                </label>
                                <input
                                    type="password"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    placeholder="‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    disabled={loading}
                                    required
                                    minLength={6}
                                />
                            </div>

                            {error && (
                                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                                    <p className="text-sm text-red-600">{error}</p>
                                </div>
                            )}

                            <button
                                type="submit"
                                disabled={loading}
                                className="w-full py-3 px-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg font-medium hover:from-blue-600 hover:to-blue-700 transition-all disabled:opacity-50"
                            >
                                {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á Link...' : 'üîó Link Email/Password'}
                            </button>
                        </form>
                    ) : (
                        <>
                            {/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
                            <div className="space-y-3">
                                {/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1: Login ‡∏î‡πâ‡∏ß‡∏¢ Provider ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà */}
                                <div className="border-2 border-gray-200 rounded-lg p-4">
                                    <h4 className="font-semibold text-gray-800 mb-2">
                                        ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1: Login ‡∏î‡πâ‡∏ß‡∏¢ {existingProviders.map(getProviderName).join(', ')}
                                    </h4>
                                    <p className="text-sm text-gray-600 mb-3">
                                        ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Login ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                                    </p>
                                    <button
                                        onClick={handleLoginWithExisting}
                                        disabled={loading}
                                        className="w-full py-2 px-4 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 transition-colors disabled:opacity-50"
                                    >
                                        {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‚úÖ Login ‡∏î‡πâ‡∏ß‡∏¢ ' + existingProviders.map(getProviderName).join(', ')}
                                    </button>
                                </div>

                                {/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2: Link accounts */}
                                <div className="border-2 border-blue-200 rounded-lg p-4 bg-blue-50">
                                    <h4 className="font-semibold text-gray-800 mb-2">
                                        ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2: Link Accounts
                                    </h4>
                                    <p className="text-sm text-gray-600 mb-3">
                                        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á accounts ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Login ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
                                    </p>
                                    
                                    {currentProvider === 'email' && existingProviders.includes('google.com') && (
                                        <button
                                            onClick={handleLinkAfterGoogleLogin}
                                            disabled={loading}
                                            className="w-full py-2 px-4 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 transition-colors disabled:opacity-50"
                                        >
                                            {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : 'üîó Login ‡∏î‡πâ‡∏ß‡∏¢ Google ‡πÅ‡∏•‡πâ‡∏ß Link Email/Password'}
                                        </button>
                                    )}

                                    {currentProvider === 'google' && existingProviders.includes('password') && (
                                        <button
                                            onClick={handleLinkGoogle}
                                            disabled={loading}
                                            className="w-full py-2 px-4 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 transition-colors disabled:opacity-50"
                                        >
                                            {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : 'üîó Link ‡∏Å‡∏±‡∏ö Google'}
                                        </button>
                                    )}
                                </div>
                            </div>

                            {/* Error Message */}
                            {error && (
                                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                                    <p className="text-sm text-red-600">{error}</p>
                                </div>
                            )}
                        </>
                    )}

                    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
                    <div className="bg-gray-50 rounded-lg p-3">
                        <p className="text-xs text-gray-600">
                            üí° <strong>Account Linking ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?</strong>
                            <br />
                            ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á accounts ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Login ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏±‡πâ‡∏á Google ‡πÅ‡∏•‡∏∞ Email/Password) ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};

