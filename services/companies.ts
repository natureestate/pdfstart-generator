/**
 * Companies Service
 * ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ç‡∏≠‡∏á User
 */

import { db, auth } from '../firebase.config';
import {
    collection,
    doc,
    getDocs,
    getDoc,
    setDoc,
    deleteDoc,
    query,
    orderBy,
    Timestamp,
    updateDoc,
} from 'firebase/firestore';
import { Company } from '../types';

// Collection name
const COMPANIES_COLLECTION = 'companies';

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏°‡πà
 * @param company - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @returns ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
 */
export const createCompany = async (
    company: Omit<Company, 'id' | 'userId' | 'createdAt' | 'updatedAt'>
): Promise<string> => {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID
        const docRef = doc(collection(db, COMPANIES_COLLECTION));
        const companyId = docRef.id;

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å - ‡∏•‡∏ö undefined fields
        const dataToSave: any = {
            name: company.name,
            userId: currentUser.uid, // ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á = Admin (‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö)
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
        };

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° optional fields ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        if (company.address) {
            dataToSave.address = company.address;
        }
        if (company.logoUrl !== undefined) {
            dataToSave.logoUrl = company.logoUrl;
        }
        if (company.logoType) {
            dataToSave.logoType = company.logoType;
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await setDoc(docRef, dataToSave);

        console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId, '(Admin:', currentUser.uid, ')');
        return companyId;
    } catch (error) {
        console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
 * @returns Array ‡∏Ç‡∏≠‡∏á Company
 */
export const getUserCompanies = async (): Promise<Company[]> => {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        }

        // ‡∏î‡∏∂‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° userId)
        const q = query(
            collection(db, COMPANIES_COLLECTION),
            orderBy('createdAt', 'desc')
        );

        const querySnapshot = await getDocs(q);
        const companies = querySnapshot.docs.map(doc => {
            const data = doc.data();
            return {
                id: doc.id,
                name: data.name,
                address: data.address,
                userId: data.userId, // Admin ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
                logoUrl: data.logoUrl,
                logoType: data.logoType,
                createdAt: data.createdAt?.toDate(),
                updatedAt: data.updatedAt?.toDate(),
            } as Company;
        });

        console.log(`üìã ‡∏î‡∏∂‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${companies.length} ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó`);
        return companies;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ï‡∏≤‡∏° ID
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @returns Company ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
export const getCompanyById = async (companyId: string): Promise<Company | null> => {
    try {
        const docRef = doc(db, COMPANIES_COLLECTION, companyId);
        const docSnap = await getDoc(docRef);

        if (!docSnap.exists()) {
            return null;
        }

        const data = docSnap.data();
        return {
            id: docSnap.id,
            name: data.name,
            address: data.address,
            userId: data.userId,
            logoUrl: data.logoUrl,
            logoType: data.logoType,
            isDefault: data.isDefault || false,
            createdAt: data.createdAt?.toDate(),
            updatedAt: data.updatedAt?.toDate(),
        } as Company;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @param updates - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export const updateCompany = async (
    companyId: string,
    updates: Partial<Omit<Company, 'id' | 'userId' | 'createdAt' | 'updatedAt'>>
): Promise<void> => {
    try {
        const docRef = doc(db, COMPANIES_COLLECTION, companyId);
        await updateDoc(docRef, {
            ...updates,
            updatedAt: Timestamp.now(),
        });

        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId);
    } catch (error) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 */
export const deleteCompany = async (companyId: string): Promise<void> => {
    try {
        const docRef = doc(db, COMPANIES_COLLECTION, companyId);
        await deleteDoc(docRef);

        console.log('‚úÖ ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId);
    } catch (error) {
        console.error('‚ùå ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

// ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô default company - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
