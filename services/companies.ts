/**
 * Companies Service
 * ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ç‡∏≠‡∏á User (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Multi-user)
 */

import { db, auth } from '../firebase.config';
import {
    collection,
    doc,
    getDocs,
    getDoc,
    setDoc,
    deleteDoc,
    query,
    orderBy,
    Timestamp,
    updateDoc,
    where,
} from 'firebase/firestore';
import { Company } from '../types';
import { addFirstAdmin, getUserMemberships, updateMemberCount } from './companyMembers';
import { createQuota } from './quota';

// Collection name
const COMPANIES_COLLECTION = 'companies';

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏°‡πà (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
 * @param company - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @returns ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
 */
export const createCompany = async (
    company: Omit<Company, 'id' | 'userId' | 'createdAt' | 'updatedAt'>
): Promise<string> => {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID
        const docRef = doc(collection(db, COMPANIES_COLLECTION));
        const companyId = docRef.id;

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å - ‡∏•‡∏ö undefined fields
        const dataToSave: any = {
            name: company.name,
            userId: currentUser.uid, // Admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å (‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó)
            memberCount: 1, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏°‡∏µ 1 ‡∏Ñ‡∏ô (Admin)
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
        };

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° optional fields ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        if (company.address) {
            dataToSave.address = company.address;
        }
        if (company.logoUrl !== undefined) {
            dataToSave.logoUrl = company.logoUrl;
        }
        if (company.logoType) {
            dataToSave.logoType = company.logoType;
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
        await setDoc(docRef, dataToSave);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        await addFirstAdmin(
            companyId,
            currentUser.uid,
            currentUser.email || '',
            currentUser.phoneNumber || undefined,
            currentUser.displayName || undefined
        );

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á quota ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Free Plan) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏´‡∏°‡πà
        try {
            await createQuota(companyId, 'free');
            console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á quota ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId);
        } catch (quotaError) {
            console.warn('‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á quota ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó):', quotaError);
        }

        console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId, '(Admin:', currentUser.uid, ')');
        return companyId;
    } catch (error) {
        console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà User ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Multi-user Support + Backward Compatible)
 * @returns Array ‡∏Ç‡∏≠‡∏á Company
 */
export const getUserCompanies = async (): Promise<Company[]> => {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        }

        const companies: Company[] = [];
        const companyIds = new Set<string>(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥

        // 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà User ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
        try {
            const memberships = await getUserMemberships(currentUser.uid);
            
            for (const membership of memberships) {
                const company = await getCompanyById(membership.companyId);
                if (company && !companyIds.has(company.id!)) {
                    companies.push(company);
                    companyIds.add(company.id!);
                }
            }
            
            console.log(`üìã ‡∏î‡∏∂‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≤‡∏Å memberships: ${memberships.length} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£`);
        } catch (error) {
            console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á memberships:', error);
        }

        // 2. Fallback: ‡∏î‡∏∂‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà User ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á (Backward Compatible)
        try {
            const q = query(
                collection(db, COMPANIES_COLLECTION),
                where('userId', '==', currentUser.uid),
                orderBy('createdAt', 'desc')
            );

            const querySnapshot = await getDocs(q);
            
            for (const doc of querySnapshot.docs) {
                if (!companyIds.has(doc.id)) {
                    const data = doc.data();
                    const company: Company = {
                        id: doc.id,
                        name: data.name,
                        address: data.address,
                        userId: data.userId,
                        logoUrl: data.logoUrl,
                        logoType: data.logoType,
                        defaultLogoUrl: data.defaultLogoUrl,
                        memberCount: data.memberCount || 0,
                        createdAt: data.createdAt?.toDate(),
                        updatedAt: data.updatedAt?.toDate(),
                    };
                    companies.push(company);
                    companyIds.add(doc.id);
                }
            }
            
            console.log(`üìã ‡∏î‡∏∂‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏Å‡πà‡∏≤ (fallback): ${querySnapshot.docs.length} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£`);
        } catch (error) {
            console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏Å‡πà‡∏≤:', error);
        }

        console.log(`üìã ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${companies.length} ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó`);
        return companies;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ï‡∏≤‡∏° ID
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @returns Company ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
export const getCompanyById = async (companyId: string): Promise<Company | null> => {
    try {
        const docRef = doc(db, COMPANIES_COLLECTION, companyId);
        const docSnap = await getDoc(docRef);

        if (!docSnap.exists()) {
            return null;
        }

        const data = docSnap.data();
        return {
            id: docSnap.id,
            name: data.name,
            address: data.address,
            userId: data.userId,
            logoUrl: data.logoUrl,
            logoType: data.logoType,
            defaultLogoUrl: data.defaultLogoUrl,
            memberCount: data.memberCount || 0,
            createdAt: data.createdAt?.toDate(),
            updatedAt: data.updatedAt?.toDate(),
        } as Company;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @param updates - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export const updateCompany = async (
    companyId: string,
    updates: Partial<Omit<Company, 'id' | 'userId' | 'createdAt' | 'updatedAt'>>
): Promise<void> => {
    try {
        const docRef = doc(db, COMPANIES_COLLECTION, companyId);
        await updateDoc(docRef, {
            ...updates,
            updatedAt: Timestamp.now(),
        });

        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId);
    } catch (error) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default logo ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 * @param defaultLogoUrl - URL ‡∏Ç‡∏≠‡∏á default logo ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
 */
export const setCompanyDefaultLogo = async (
    companyId: string,
    defaultLogoUrl: string
): Promise<void> => {
    try {
        const docRef = doc(db, COMPANIES_COLLECTION, companyId);
        await updateDoc(docRef, {
            defaultLogoUrl: defaultLogoUrl,
            updatedAt: Timestamp.now(),
        });

        console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default logo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId, defaultLogoUrl);
    } catch (error) {
        console.error('‚ùå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default logo ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default logo ‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
 */
export const deleteCompany = async (companyId: string): Promise<void> => {
    try {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const company = await getCompanyById(companyId);
        if (!company) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ô‡∏µ‡πâ');
        }

        if (company.userId !== currentUser.uid) {
            throw new Error('‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ');
        }

        const docRef = doc(db, COMPANIES_COLLECTION, companyId);
        await deleteDoc(docRef);

        console.log('‚úÖ ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId);
    } catch (error) {
        console.error('‚ùå ‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};
