/**
 * Authentication Service
 * ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firebase Authentication ‡∏î‡πâ‡∏ß‡∏¢ Google OAuth ‡πÅ‡∏•‡∏∞ Phone Authentication
 */

import { auth } from '../firebase.config';
import {
    signInWithPopup,
    GoogleAuthProvider,
    signOut as firebaseSignOut,
    onAuthStateChanged as firebaseOnAuthStateChanged,
    User,
    RecaptchaVerifier,
    signInWithPhoneNumber,
    ConfirmationResult,
} from 'firebase/auth';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Google Provider
const googleProvider = new GoogleAuthProvider();

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î scopes ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (optional)
googleProvider.addScope('profile');
googleProvider.addScope('email');

/**
 * Login ‡∏î‡πâ‡∏ß‡∏¢ Google OAuth
 * @returns Promise<User> - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
export const signInWithGoogle = async (): Promise<User> => {
    try {
        const result = await signInWithPopup(auth, googleProvider);
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const user = result.user;
        
        // ‡∏î‡∏∂‡∏á Google Access Token (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google APIs)
        const credential = GoogleAuthProvider.credentialFromResult(result);
        const token = credential?.accessToken;
        
        console.log('‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', {
            name: user.displayName,
            email: user.email,
            uid: user.uid,
        });
        
        return user;
    } catch (error: any) {
        console.error('‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error codes ‡∏ï‡πà‡∏≤‡∏á‡πÜ
        const errorCode = error.code;
        const errorMessage = error.message;
        
        // ‡πÅ‡∏õ‡∏• error message ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        let thaiErrorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Login';
        
        switch (errorCode) {
            case 'auth/popup-closed-by-user':
                thaiErrorMessage = '‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Login';
                break;
            case 'auth/cancelled-popup-request':
                thaiErrorMessage = '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ Login ‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß';
                break;
            case 'auth/popup-blocked':
                thaiErrorMessage = '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ö‡∏•‡πá‡∏≠‡∏Å popup ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï popup';
                break;
            case 'auth/network-request-failed':
                thaiErrorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÑ‡∏î‡πâ';
                break;
            case 'auth/too-many-requests':
                thaiErrorMessage = '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° Login ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
                break;
            default:
                thaiErrorMessage = errorMessage || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Login';
        }
        
        throw new Error(thaiErrorMessage);
    }
};

/**
 * Logout
 */
export const signOut = async (): Promise<void> => {
    try {
        await firebaseSignOut(auth);
        console.log('‚úÖ Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
        console.error('‚ùå Logout ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Logout ‡πÑ‡∏î‡πâ');
    }
};

/**
 * ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ Login
 * @param callback - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
 * @returns unsubscribe function
 */
export const onAuthStateChanged = (callback: (user: User | null) => void) => {
    return firebaseOnAuthStateChanged(auth, callback);
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * @returns User | null
 */
export const getCurrentUser = (): User | null => {
    return auth.currentUser;
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
 * @returns boolean
 */
export const isAuthenticated = (): boolean => {
    return auth.currentUser !== null;
};

// ==================== Phone Authentication ====================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á RecaptchaVerifier ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Phone Authentication
 * @param elementId - ID ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á reCAPTCHA (‡πÉ‡∏ä‡πâ invisible mode)
 * @returns RecaptchaVerifier instance
 */
export const createRecaptchaVerifier = (elementId: string): RecaptchaVerifier => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô localhost ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isLocalhost = window.location.hostname === 'localhost' || 
                       window.location.hostname === '127.0.0.1';
    
    if (isLocalhost) {
        console.log('üîß Development Mode: ‡πÉ‡∏ä‡πâ reCAPTCHA ‡πÅ‡∏ö‡∏ö visible ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö localhost');
        // ‡πÉ‡∏ä‡πâ visible mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö localhost ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
        return new RecaptchaVerifier(auth, elementId, {
            size: 'normal', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô normal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô checkbox
            callback: () => {
                console.log('‚úÖ reCAPTCHA resolved ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Phone Auth (localhost)');
            },
            'expired-callback': () => {
                console.warn('‚ö†Ô∏è reCAPTCHA ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
            }
        });
    }
    
    // Production: ‡πÉ‡∏ä‡πâ invisible mode
    return new RecaptchaVerifier(auth, elementId, {
        size: 'invisible',
        callback: () => {
            console.log('‚úÖ reCAPTCHA resolved ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Phone Auth');
        },
        'expired-callback': () => {
            console.warn('‚ö†Ô∏è reCAPTCHA ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
        }
    });
};

/**
 * ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
 * @param phoneNumber - ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö +66XXXXXXXXX
 * @param recaptchaVerifier - RecaptchaVerifier instance
 * @returns Promise<ConfirmationResult> - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP
 */
export const sendPhoneOTP = async (
    phoneNumber: string,
    recaptchaVerifier: RecaptchaVerifier
): Promise<ConfirmationResult> => {
    try {
        console.log('üì± ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á:', phoneNumber);
        
        const confirmationResult = await signInWithPhoneNumber(
            auth,
            phoneNumber,
            recaptchaVerifier
        );
        
        console.log('‚úÖ ‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        return confirmationResult;
    } catch (error: any) {
        console.error('‚ùå ‡∏™‡πà‡∏á OTP ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        
        // ‡πÅ‡∏õ‡∏• error message ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        const errorCode = error.code;
        let thaiErrorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡πÑ‡∏î‡πâ';
        
        switch (errorCode) {
            case 'auth/invalid-phone-number':
                thaiErrorMessage = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
                break;
            case 'auth/missing-phone-number':
                thaiErrorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
                break;
            case 'auth/quota-exceeded':
                thaiErrorMessage = '‡∏™‡πà‡∏á SMS ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á';
                break;
            case 'auth/user-disabled':
                thaiErrorMessage = '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
                break;
            case 'auth/operation-not-allowed':
                thaiErrorMessage = '‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Phone Authentication';
                break;
            case 'auth/too-many-requests':
                thaiErrorMessage = '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
                break;
            case 'auth/captcha-check-failed':
                thaiErrorMessage = '‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö reCAPTCHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
                break;
            default:
                thaiErrorMessage = error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡πÑ‡∏î‡πâ';
        }
        
        throw new Error(thaiErrorMessage);
    }
};

/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÅ‡∏•‡∏∞ Login
 * @param confirmationResult - ‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP
 * @param otp - ‡∏£‡∏´‡∏±‡∏™ OTP 6 ‡∏´‡∏•‡∏±‡∏Å
 * @returns Promise<User> - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
export const verifyPhoneOTP = async (
    confirmationResult: ConfirmationResult,
    otp: string
): Promise<User> => {
    try {
        console.log('üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP...');
        
        const result = await confirmationResult.confirm(otp);
        const user = result.user;
        
        console.log('‚úÖ Login ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', {
            phoneNumber: user.phoneNumber,
            uid: user.uid,
        });
        
        return user;
    } catch (error: any) {
        console.error('‚ùå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        
        // ‡πÅ‡∏õ‡∏• error message ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        const errorCode = error.code;
        let thaiErrorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÑ‡∏î‡πâ';
        
        switch (errorCode) {
            case 'auth/invalid-verification-code':
                thaiErrorMessage = '‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
                break;
            case 'auth/code-expired':
                thaiErrorMessage = '‡∏£‡∏´‡∏±‡∏™ OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà';
                break;
            case 'auth/missing-verification-code':
                thaiErrorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP';
                break;
            case 'auth/session-expired':
                thaiErrorMessage = 'Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏´‡∏°‡πà';
                break;
            default:
                thaiErrorMessage = error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÑ‡∏î‡πâ';
        }
        
        throw new Error(thaiErrorMessage);
    }
};
