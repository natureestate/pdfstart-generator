/**
 * Company Members Service
 * ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ (Multi-user Management)
 */

import { db, auth } from '../firebase.config';
import {
    collection,
    doc,
    getDocs,
    getDoc,
    setDoc,
    deleteDoc,
    query,
    where,
    orderBy,
    Timestamp,
    updateDoc,
    writeBatch,
} from 'firebase/firestore';
import { CompanyMember, UserRole, MemberStatus } from '../types';

// Collection name
const MEMBERS_COLLECTION = 'companyMembers';
const COMPANIES_COLLECTION = 'companies';

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param email - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 * @param role - ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (admin ‡∏´‡∏£‡∏∑‡∏≠ member)
 * @returns ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
 */
export const addCompanyMember = async (
    companyId: string,
    email: string,
    role: UserRole = 'member'
): Promise<string> => {
    try {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isAdmin = await checkIsAdmin(companyId, currentUser.uid);
        if (!isAdmin) {
            throw new Error('‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID
        const docRef = doc(collection(db, MEMBERS_COLLECTION));
        const memberId = docRef.id;

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        const memberData = {
            companyId,
            userId: '', // ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠ user login
            email: email.toLowerCase(),
            role,
            status: 'pending' as MemberStatus, // ‡∏£‡∏≠ user login ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            invitedBy: currentUser.uid,
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
        };

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await setDoc(docRef, memberData);

        console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', memberId, '(Email:', email, ')');
        return memberId;
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏£‡∏Å (Admin) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param userId - User ID ‡∏Ç‡∏≠‡∏á Admin
 * @param email - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á Admin
 * @param phoneNumber - ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (optional)
 * @param displayName - ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á (optional)
 * @returns ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
 */
export const addFirstAdmin = async (
    companyId: string,
    userId: string,
    email: string,
    phoneNumber?: string,
    displayName?: string
): Promise<string> => {
    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID
        const docRef = doc(collection(db, MEMBERS_COLLECTION));
        const memberId = docRef.id;

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
        const memberData: any = {
            companyId,
            userId,
            email: email.toLowerCase(),
            role: 'admin' as UserRole,
            status: 'active' as MemberStatus,
            joinedAt: Timestamp.now(),
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
        };

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° optional fields
        if (phoneNumber) memberData.phoneNumber = phoneNumber;
        if (displayName) memberData.displayName = displayName;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await setDoc(docRef, memberData);

        console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', memberId);
        return memberId;
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @returns Array ‡∏Ç‡∏≠‡∏á CompanyMember
 */
export const getCompanyMembers = async (companyId: string): Promise<CompanyMember[]> => {
    try {
        const q = query(
            collection(db, MEMBERS_COLLECTION),
            where('companyId', '==', companyId),
            orderBy('createdAt', 'desc')
        );

        const querySnapshot = await getDocs(q);
        const members = querySnapshot.docs.map(doc => {
            const data = doc.data();
            return {
                id: doc.id,
                companyId: data.companyId,
                userId: data.userId,
                email: data.email,
                phoneNumber: data.phoneNumber,
                displayName: data.displayName,
                role: data.role,
                status: data.status,
                joinedAt: data.joinedAt?.toDate(),
                invitedBy: data.invitedBy,
                createdAt: data.createdAt?.toDate(),
                updatedAt: data.updatedAt?.toDate(),
            } as CompanyMember;
        });

        console.log(`üìã ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ${companyId}: ${members.length} ‡∏Ñ‡∏ô`);
        return members;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà User ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 * @param userId - User ID
 * @returns Array ‡∏Ç‡∏≠‡∏á CompanyMember
 */
export const getUserMemberships = async (userId: string): Promise<CompanyMember[]> => {
    try {
        const q = query(
            collection(db, MEMBERS_COLLECTION),
            where('userId', '==', userId),
            where('status', '==', 'active'),
            orderBy('createdAt', 'desc')
        );

        const querySnapshot = await getDocs(q);
        const memberships = querySnapshot.docs.map(doc => {
            const data = doc.data();
            return {
                id: doc.id,
                companyId: data.companyId,
                userId: data.userId,
                email: data.email,
                phoneNumber: data.phoneNumber,
                displayName: data.displayName,
                role: data.role,
                status: data.status,
                joinedAt: data.joinedAt?.toDate(),
                invitedBy: data.invitedBy,
                createdAt: data.createdAt?.toDate(),
                updatedAt: data.updatedAt?.toDate(),
            } as CompanyMember;
        });

        console.log(`üìã ‡∏î‡∏∂‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏≠‡∏á User ${userId}: ${memberships.length} ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£`);
        return memberships;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param userId - User ID
 * @returns true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin
 */
export const checkIsAdmin = async (companyId: string, userId: string): Promise<boolean> => {
    try {
        const q = query(
            collection(db, MEMBERS_COLLECTION),
            where('companyId', '==', companyId),
            where('userId', '==', userId),
            where('role', '==', 'admin'),
            where('status', '==', 'active')
        );

        const querySnapshot = await getDocs(q);
        return !querySnapshot.empty;
    } catch (error) {
        console.error('‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        return false;
    }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param userId - User ID
 * @returns true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 */
export const checkIsMember = async (companyId: string, userId: string): Promise<boolean> => {
    try {
        const q = query(
            collection(db, MEMBERS_COLLECTION),
            where('companyId', '==', companyId),
            where('userId', '==', userId),
            where('status', '==', 'active')
        );

        const querySnapshot = await getDocs(q);
        return !querySnapshot.empty;
    } catch (error) {
        console.error('‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        return false;
    }
};

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 * @param memberId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 * @param role - ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡∏°‡πà
 */
export const updateMemberRole = async (memberId: string, role: UserRole): Promise<void> => {
    try {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó');
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        const memberRef = doc(db, MEMBERS_COLLECTION, memberId);
        const memberDoc = await getDoc(memberRef);

        if (!memberDoc.exists()) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ');
        }

        const memberData = memberDoc.data();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isAdmin = await checkIsAdmin(memberData.companyId, currentUser.uid);
        if (!isAdmin) {
            throw new Error('‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏î‡πâ');
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
        await updateDoc(memberRef, {
            role,
            updatedAt: Timestamp.now(),
        });

        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', memberId, '‚Üí', role);
    } catch (error) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param memberId - ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
 */
export const removeMember = async (memberId: string): Promise<void> => {
    try {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
        const memberRef = doc(db, MEMBERS_COLLECTION, memberId);
        const memberDoc = await getDoc(memberRef);

        if (!memberDoc.exists()) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ');
        }

        const memberData = memberDoc.data();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isAdmin = await checkIsAdmin(memberData.companyId, currentUser.uid);
        if (!isAdmin) {
            throw new Error('‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
        }

        // ‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        const members = await getCompanyMembers(memberData.companyId);
        const admins = members.filter(m => m.role === 'admin' && m.status === 'active');
        
        if (admins.length === 1 && memberData.userId === currentUser.uid) {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Admin ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
        }

        // ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        await deleteDoc(memberRef);

        console.log('‚úÖ ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', memberId);
    } catch (error) {
        console.error('‚ùå ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ (‡πÄ‡∏°‡∏∑‡πà‡∏≠ User login ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
 * @param email - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á User
 * @param userId - User ID
 * @param phoneNumber - ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (optional)
 * @param displayName - ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á (optional)
 */
export const confirmMembership = async (
    email: string,
    userId: string,
    phoneNumber?: string,
    displayName?: string
): Promise<void> => {
    try {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ pending membership ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        const q = query(
            collection(db, MEMBERS_COLLECTION),
            where('email', '==', email.toLowerCase()),
            where('status', '==', 'pending')
        );

        const querySnapshot = await getDocs(q);

        if (querySnapshot.empty) {
            console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ');
            return;
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å pending membership
        const batch = writeBatch(db);

        querySnapshot.docs.forEach(doc => {
            const updateData: any = {
                userId,
                status: 'active' as MemberStatus,
                joinedAt: Timestamp.now(),
                updatedAt: Timestamp.now(),
            };

            if (phoneNumber) updateData.phoneNumber = phoneNumber;
            if (displayName) updateData.displayName = displayName;

            batch.update(doc.ref, updateData);
        });

        await batch.commit();

        console.log('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', querySnapshot.docs.length, '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£');
    } catch (error) {
        console.error('‚ùå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 */
export const updateMemberCount = async (companyId: string): Promise<void> => {
    try {
        const members = await getCompanyMembers(companyId);
        const activeMembers = members.filter(m => m.status === 'active');

        const companyRef = doc(db, COMPANIES_COLLECTION, companyId);
        await updateDoc(companyRef, {
            memberCount: activeMembers.length,
            updatedAt: Timestamp.now(),
        });

        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', companyId, '‚Üí', activeMembers.length, '‡∏Ñ‡∏ô');
    } catch (error) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    }
};

