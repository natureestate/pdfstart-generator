/**
 * Plan Templates Service
 * ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Template ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö Dynamic)
 */

import { db } from '../firebase.config';
import {
    collection,
    doc,
    getDoc,
    getDocs,
    setDoc,
    updateDoc,
    deleteDoc,
    Timestamp,
} from 'firebase/firestore';
import { SubscriptionPlan } from '../types';

// Collection name
const PLAN_TEMPLATES_COLLECTION = 'planTemplates';

/**
 * Plan Template Interface
 */
export interface PlanTemplate {
    id?: string;                      // Plan ID (free, basic, premium, enterprise)
    name: string;                     // ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô (‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI)
    description: string;              // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô
    
    // ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤
    maxUsers: number;                 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (-1 = ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î)
    maxDocuments: number;             // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (-1 = ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î)
    maxLogos: number;                 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏•‡πÇ‡∏Å‡πâ (-1 = ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î)
    maxStorageMB: number;             // Storage ‡πÉ‡∏ô MB (-1 = ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î)
    allowCustomLogo: boolean;         // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
    
    // Features
    features: {
        multipleProfiles: boolean;
        apiAccess: boolean;
        customDomain: boolean;
        prioritySupport: boolean;
        exportPDF: boolean;
        exportExcel: boolean;
        advancedReports: boolean;
        customTemplates: boolean;
    };
    
    // ‡∏£‡∏≤‡∏Ñ‡∏≤
    price: number;                    // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (0 = ‡∏ü‡∏£‡∏µ)
    currency: string;                 // ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
    
    // ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    displayOrder: number;             // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    isActive: boolean;                // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    isPopular: boolean;               // ‡πÅ‡∏ú‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
    color: string;                    // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI)
    
    // Metadata
    createdAt?: Date;
    updatedAt?: Date;
    updatedBy?: string;
}

/**
 * Default Plan Templates (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Initialize ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
 */
const DEFAULT_PLAN_TEMPLATES: Record<SubscriptionPlan, Omit<PlanTemplate, 'createdAt' | 'updatedAt'>> = {
    free: {
        id: 'free',
        name: 'üÜì Free',
        description: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        maxUsers: 3,
        maxDocuments: 50,
        maxLogos: 1,
        maxStorageMB: 100,
        allowCustomLogo: false,
        features: {
            multipleProfiles: false,
            apiAccess: false,
            customDomain: false,
            prioritySupport: false,
            exportPDF: true,
            exportExcel: false,
            advancedReports: false,
            customTemplates: false,
        },
        price: 0,
        currency: 'THB',
        displayOrder: 1,
        isActive: true,
        isPopular: false,
        color: '#9CA3AF',
    },
    basic: {
        id: 'basic',
        name: 'üíº Basic',
        description: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å',
        maxUsers: 10,
        maxDocuments: 200,
        maxLogos: 5,
        maxStorageMB: 500,
        allowCustomLogo: true,
        features: {
            multipleProfiles: true,
            apiAccess: false,
            customDomain: false,
            prioritySupport: false,
            exportPDF: true,
            exportExcel: true,
            advancedReports: false,
            customTemplates: true,
        },
        price: 299,
        currency: 'THB',
        displayOrder: 2,
        isActive: true,
        isPopular: false,
        color: '#3B82F6',
    },
    premium: {
        id: 'premium',
        name: 'üíé Premium',
        description: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á',
        maxUsers: 50,
        maxDocuments: 1000,
        maxLogos: 20,
        maxStorageMB: 2000,
        allowCustomLogo: true,
        features: {
            multipleProfiles: true,
            apiAccess: true,
            customDomain: false,
            prioritySupport: true,
            exportPDF: true,
            exportExcel: true,
            advancedReports: true,
            customTemplates: true,
        },
        price: 999,
        currency: 'THB',
        displayOrder: 3,
        isActive: true,
        isPopular: true,
        color: '#F59E0B',
    },
    enterprise: {
        id: 'enterprise',
        name: 'üè¢ Enterprise',
        description: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà',
        maxUsers: -1,
        maxDocuments: -1,
        maxLogos: -1,
        maxStorageMB: -1,
        allowCustomLogo: true,
        features: {
            multipleProfiles: true,
            apiAccess: true,
            customDomain: true,
            prioritySupport: true,
            exportPDF: true,
            exportExcel: true,
            advancedReports: true,
            customTemplates: true,
        },
        price: 2999,
        currency: 'THB',
        displayOrder: 4,
        isActive: true,
        isPopular: false,
        color: '#8B5CF6',
    },
};

/**
 * Initialize Plan Templates (‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á templates)
 */
export const initializePlanTemplates = async (): Promise<void> => {
    try {
        console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Initialize Plan Templates...');

        for (const [planId, template] of Object.entries(DEFAULT_PLAN_TEMPLATES)) {
            const templateRef = doc(db, PLAN_TEMPLATES_COLLECTION, planId);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const templateSnap = await getDoc(templateRef);
            
            if (!templateSnap.exists()) {
                await setDoc(templateRef, {
                    ...template,
                    createdAt: Timestamp.now(),
                    updatedAt: Timestamp.now(),
                });
                console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á template: ${template.name}`);
            } else {
                console.log(`‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°: ${template.name} (‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)`);
            }
        }

        console.log('‚úÖ Initialize Plan Templates ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    } catch (error) {
        console.error('‚ùå Initialize Plan Templates ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plan Template ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const getAllPlanTemplates = async (): Promise<PlanTemplate[]> => {
    try {
        const templatesRef = collection(db, PLAN_TEMPLATES_COLLECTION);
        const querySnapshot = await getDocs(templatesRef);

        if (querySnapshot.empty) {
            console.warn('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö Plan Templates, ‡∏Å‡∏≥‡∏•‡∏±‡∏á Initialize...');
            await initializePlanTemplates();
            return await getAllPlanTemplates();
        }

        const templates: PlanTemplate[] = [];

        for (const doc of querySnapshot.docs) {
            const data = doc.data();
            templates.push({
                id: doc.id,
                name: data.name,
                description: data.description,
                maxUsers: data.maxUsers,
                maxDocuments: data.maxDocuments,
                maxLogos: data.maxLogos,
                maxStorageMB: data.maxStorageMB,
                allowCustomLogo: data.allowCustomLogo,
                features: data.features,
                price: data.price,
                currency: data.currency,
                displayOrder: data.displayOrder,
                isActive: data.isActive,
                isPopular: data.isPopular,
                color: data.color,
                createdAt: data.createdAt?.toDate(),
                updatedAt: data.updatedAt?.toDate(),
                updatedBy: data.updatedBy,
            });
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° displayOrder
        templates.sort((a, b) => a.displayOrder - b.displayOrder);

        return templates;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á Plan Templates ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plan Template ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ú‡∏ô
 */
export const getPlanTemplate = async (planId: string): Promise<PlanTemplate | null> => {
    try {
        const templateRef = doc(db, PLAN_TEMPLATES_COLLECTION, planId);
        const templateSnap = await getDoc(templateRef);

        if (!templateSnap.exists()) {
            return null;
        }

        const data = templateSnap.data();
        return {
            id: templateSnap.id,
            name: data.name,
            description: data.description,
            maxUsers: data.maxUsers,
            maxDocuments: data.maxDocuments,
            maxLogos: data.maxLogos,
            maxStorageMB: data.maxStorageMB,
            allowCustomLogo: data.allowCustomLogo,
            features: data.features,
            price: data.price,
            currency: data.currency,
            displayOrder: data.displayOrder,
            isActive: data.isActive,
            isPopular: data.isPopular,
            color: data.color,
            createdAt: data.createdAt?.toDate(),
            updatedAt: data.updatedAt?.toDate(),
            updatedBy: data.updatedBy,
        };
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á Plan Template ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Plan Template
 */
export const updatePlanTemplate = async (
    planId: string,
    updates: Partial<Omit<PlanTemplate, 'id' | 'createdAt' | 'updatedAt'>>,
    updatedBy?: string
): Promise<void> => {
    try {
        const templateRef = doc(db, PLAN_TEMPLATES_COLLECTION, planId);

        const updateData: any = {
            ...updates,
            updatedAt: Timestamp.now(),
        };

        if (updatedBy) {
            updateData.updatedBy = updatedBy;
        }

        await updateDoc(templateRef, updateData);

        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Plan Template ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', planId);
    } catch (error) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Plan Template ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏•‡∏ö Plan Template
 */
export const deletePlanTemplate = async (planId: string): Promise<void> => {
    try {
        const templateRef = doc(db, PLAN_TEMPLATES_COLLECTION, planId);
        await deleteDoc(templateRef);

        console.log('‚úÖ ‡∏•‡∏ö Plan Template ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', planId);
    } catch (error) {
        console.error('‚ùå ‡∏•‡∏ö Plan Template ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * Export Default Templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô quota.ts
 */
export { DEFAULT_PLAN_TEMPLATES };

