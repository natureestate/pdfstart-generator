/**
 * Invitations Service
 * ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ (Invitation System)
 */

import { db, auth } from '../firebase.config';
import {
    collection,
    doc,
    getDocs,
    getDoc,
    setDoc,
    deleteDoc,
    query,
    where,
    orderBy,
    Timestamp,
    updateDoc,
} from 'firebase/firestore';
import { Invitation, InvitationStatus, UserRole } from '../types';
import { checkIsAdmin } from './companyMembers';

// Collection name
const INVITATIONS_COLLECTION = 'invitations';
const COMPANIES_COLLECTION = 'companies';

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
 * @returns Token string
 */
const generateInvitationToken = (): string => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let token = '';
    for (let i = 0; i < 32; i++) {
        token += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return token;
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param companyName - ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param email - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç
 * @param role - ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (admin ‡∏´‡∏£‡∏∑‡∏≠ member)
 * @param message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏ç (optional)
 * @returns Invitation object
 */
export const createInvitation = async (
    companyId: string,
    companyName: string,
    email: string,
    role: UserRole = 'member',
    message?: string
): Promise<Invitation> => {
    try {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isAdmin = await checkIsAdmin(companyId, currentUser.uid);
        if (!isAdmin) {
            throw new Error('‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡πà pending ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingInvitation = await getInvitationByEmail(companyId, email);
        if (existingInvitation && existingInvitation.status === 'pending') {
            throw new Error('‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Token
        const token = generateInvitationToken();

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (7 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + 7);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID
        const docRef = doc(collection(db, INVITATIONS_COLLECTION));
        const invitationId = docRef.id;

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        const invitationData: any = {
            companyId,
            companyName,
            email: email.toLowerCase(),
            role,
            status: 'pending' as InvitationStatus,
            invitedBy: currentUser.uid,
            invitedByName: currentUser.displayName || undefined,
            invitedByEmail: currentUser.email || undefined,
            token,
            expiresAt: Timestamp.fromDate(expiresAt),
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
        };

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (message) {
            invitationData.message = message;
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await setDoc(docRef, invitationData);

        console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', invitationId, '(Email:', email, ')');

        // Return invitation object
        return {
            id: invitationId,
            ...invitationData,
            expiresAt,
            createdAt: new Date(),
            updatedAt: new Date(),
        } as Invitation;
    } catch (error) {
        console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ï‡∏≤‡∏° Token
 * @param token - Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
 * @returns Invitation object ‡∏´‡∏£‡∏∑‡∏≠ null
 */
export const getInvitationByToken = async (token: string): Promise<Invitation | null> => {
    try {
        const q = query(
            collection(db, INVITATIONS_COLLECTION),
            where('token', '==', token)
        );

        const querySnapshot = await getDocs(q);

        if (querySnapshot.empty) {
            return null;
        }

        const doc = querySnapshot.docs[0];
        const data = doc.data();

        return {
            id: doc.id,
            companyId: data.companyId,
            companyName: data.companyName,
            email: data.email,
            role: data.role,
            status: data.status,
            invitedBy: data.invitedBy,
            invitedByName: data.invitedByName,
            invitedByEmail: data.invitedByEmail,
            token: data.token,
            expiresAt: data.expiresAt?.toDate(),
            acceptedAt: data.acceptedAt?.toDate(),
            acceptedBy: data.acceptedBy,
            message: data.message,
            createdAt: data.createdAt?.toDate(),
            updatedAt: data.updatedAt?.toDate(),
        } as Invitation;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ï‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param email - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç
 * @returns Invitation object ‡∏´‡∏£‡∏∑‡∏≠ null
 */
export const getInvitationByEmail = async (
    companyId: string,
    email: string
): Promise<Invitation | null> => {
    try {
        const q = query(
            collection(db, INVITATIONS_COLLECTION),
            where('companyId', '==', companyId),
            where('email', '==', email.toLowerCase()),
            where('status', '==', 'pending')
        );

        const querySnapshot = await getDocs(q);

        if (querySnapshot.empty) {
            return null;
        }

        const doc = querySnapshot.docs[0];
        const data = doc.data();

        return {
            id: doc.id,
            companyId: data.companyId,
            companyName: data.companyName,
            email: data.email,
            role: data.role,
            status: data.status,
            invitedBy: data.invitedBy,
            invitedByName: data.invitedByName,
            invitedByEmail: data.invitedByEmail,
            token: data.token,
            expiresAt: data.expiresAt?.toDate(),
            acceptedAt: data.acceptedAt?.toDate(),
            acceptedBy: data.acceptedBy,
            message: data.message,
            createdAt: data.createdAt?.toDate(),
            updatedAt: data.updatedAt?.toDate(),
        } as Invitation;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 * @returns Array ‡∏Ç‡∏≠‡∏á Invitation
 */
export const getCompanyInvitations = async (companyId: string): Promise<Invitation[]> => {
    try {
        const q = query(
            collection(db, INVITATIONS_COLLECTION),
            where('companyId', '==', companyId),
            orderBy('createdAt', 'desc')
        );

        const querySnapshot = await getDocs(q);
        const invitations = querySnapshot.docs.map(doc => {
            const data = doc.data();
            return {
                id: doc.id,
                companyId: data.companyId,
                companyName: data.companyName,
                email: data.email,
                role: data.role,
                status: data.status,
                invitedBy: data.invitedBy,
                invitedByName: data.invitedByName,
                invitedByEmail: data.invitedByEmail,
                token: data.token,
                expiresAt: data.expiresAt?.toDate(),
                acceptedAt: data.acceptedAt?.toDate(),
                acceptedBy: data.acceptedBy,
                message: data.message,
                createdAt: data.createdAt?.toDate(),
                updatedAt: data.updatedAt?.toDate(),
            } as Invitation;
        });

        console.log(`üìã ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ${companyId}: ${invitations.length} ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç`);
        return invitations;
    } catch (error) {
        console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
 * @param token - Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
 * @param userId - User ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
 * @returns Invitation object ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
 */
export const acceptInvitation = async (token: string, userId: string): Promise<Invitation> => {
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        const invitation = await getInvitationByToken(token);

        if (!invitation) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ô‡∏µ‡πâ');
        }

        if (invitation.status !== 'pending') {
            throw new Error('‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        if (invitation.expiresAt && invitation.expiresAt < new Date()) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô expired
            await updateDoc(doc(db, INVITATIONS_COLLECTION, invitation.id!), {
                status: 'expired' as InvitationStatus,
                updatedAt: Timestamp.now(),
            });
            throw new Error('‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        await updateDoc(doc(db, INVITATIONS_COLLECTION, invitation.id!), {
            status: 'accepted' as InvitationStatus,
            acceptedAt: Timestamp.now(),
            acceptedBy: userId,
            updatedAt: Timestamp.now(),
        });

        console.log('‚úÖ ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', invitation.id);

        // Return updated invitation
        return {
            ...invitation,
            status: 'accepted',
            acceptedAt: new Date(),
            acceptedBy: userId,
            updatedAt: new Date(),
        };
    } catch (error) {
        console.error('‚ùå ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
 * @param token - Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
 */
export const rejectInvitation = async (token: string): Promise<void> => {
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        const invitation = await getInvitationByToken(token);

        if (!invitation) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ô‡∏µ‡πâ');
        }

        if (invitation.status !== 'pending') {
            throw new Error('‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò');
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        await updateDoc(doc(db, INVITATIONS_COLLECTION, invitation.id!), {
            status: 'rejected' as InvitationStatus,
            updatedAt: Timestamp.now(),
        });

        console.log('‚úÖ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', invitation.id);
    } catch (error) {
        console.error('‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç (‡πÇ‡∏î‡∏¢ Admin)
 * @param invitationId - ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
 */
export const cancelInvitation = async (invitationId: string): Promise<void> => {
    try {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç');
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        const invitationRef = doc(db, INVITATIONS_COLLECTION, invitationId);
        const invitationDoc = await getDoc(invitationRef);

        if (!invitationDoc.exists()) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ô‡∏µ‡πâ');
        }

        const invitationData = invitationDoc.data();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isAdmin = await checkIsAdmin(invitationData.companyId, currentUser.uid);
        if (!isAdmin) {
            throw new Error('‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÑ‡∏î‡πâ');
        }

        // ‡∏•‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        await deleteDoc(invitationRef);

        console.log('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', invitationId);
    } catch (error) {
        console.error('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏´‡∏°‡πà (Resend)
 * @param invitationId - ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
 * @returns Invitation object ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
 */
export const resendInvitation = async (invitationId: string): Promise<Invitation> => {
    try {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏´‡∏°‡πà');
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        const invitationRef = doc(db, INVITATIONS_COLLECTION, invitationId);
        const invitationDoc = await getDoc(invitationRef);

        if (!invitationDoc.exists()) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ô‡∏µ‡πâ');
        }

        const invitationData = invitationDoc.data();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isAdmin = await checkIsAdmin(invitationData.companyId, currentUser.uid);
        if (!isAdmin) {
            throw new Error('‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÉ‡∏´‡∏°‡πà
        const newToken = generateInvitationToken();

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡∏°‡πà (7 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
        const newExpiresAt = new Date();
        newExpiresAt.setDate(newExpiresAt.getDate() + 7);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
        await updateDoc(invitationRef, {
            token: newToken,
            expiresAt: Timestamp.fromDate(newExpiresAt),
            status: 'pending' as InvitationStatus,
            updatedAt: Timestamp.now(),
        });

        console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', invitationId);

        // Return updated invitation
        return {
            id: invitationId,
            companyId: invitationData.companyId,
            companyName: invitationData.companyName,
            email: invitationData.email,
            role: invitationData.role,
            status: 'pending',
            invitedBy: invitationData.invitedBy,
            invitedByName: invitationData.invitedByName,
            invitedByEmail: invitationData.invitedByEmail,
            token: newToken,
            expiresAt: newExpiresAt,
            message: invitationData.message,
            createdAt: invitationData.createdAt?.toDate(),
            updatedAt: new Date(),
        } as Invitation;
    } catch (error) {
        console.error('‚ùå ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏´‡∏°‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
        throw error;
    }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 * @param companyId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
 */
export const checkExpiredInvitations = async (companyId: string): Promise<void> => {
    try {
        const q = query(
            collection(db, INVITATIONS_COLLECTION),
            where('companyId', '==', companyId),
            where('status', '==', 'pending')
        );

        const querySnapshot = await getDocs(q);
        const now = new Date();

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        const updatePromises = querySnapshot.docs
            .filter(doc => {
                const expiresAt = doc.data().expiresAt?.toDate();
                return expiresAt && expiresAt < now;
            })
            .map(doc =>
                updateDoc(doc.ref, {
                    status: 'expired' as InvitationStatus,
                    updatedAt: Timestamp.now(),
                })
            );

        await Promise.all(updatePromises);

        console.log(`‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${updatePromises.length} ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç`);
    } catch (error) {
        console.error('‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    }
};

